
22_I2C_protocol.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000688  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000830  08000838  00010838  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000830  08000830  00010838  2**0
                  CONTENTS
  4 .ARM          00000000  08000830  08000830  00010838  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000830  08000838  00010838  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000830  08000830  00010830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000834  08000834  00010834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010838  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010838  2**0
                  CONTENTS
 10 .bss          00000038  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000038  20000038  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010838  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00010868  2**0
                  CONTENTS, READONLY
 14 .debug_info   000007d8  00000000  00000000  000108ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000380  00000000  00000000  00011083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000000b8  00000000  00000000  00011408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000007b  00000000  00000000  000114c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00018f36  00000000  00000000  0001153b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00001494  00000000  00000000  0002a471  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0008bd69  00000000  00000000  0002b905  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000198  00000000  00000000  000b7670  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004a  00000000  00000000  000b7808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000818 	.word	0x08000818

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000818 	.word	0x08000818

080001e8 <adxl_read_address>:
char data;

uint8_t data_rec[6];

void adxl_read_address(uint8_t reg)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b082      	sub	sp, #8
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	4603      	mov	r3, r0
 80001f0:	71fb      	strb	r3, [r7, #7]
	I2C1_ByteRead(DEVICE_ADDR,reg,&data);
 80001f2:	79fb      	ldrb	r3, [r7, #7]
 80001f4:	4a04      	ldr	r2, [pc, #16]	; (8000208 <adxl_read_address+0x20>)
 80001f6:	4619      	mov	r1, r3
 80001f8:	2053      	movs	r0, #83	; 0x53
 80001fa:	f000 f8e9 	bl	80003d0 <I2C1_ByteRead>
}
 80001fe:	bf00      	nop
 8000200:	3708      	adds	r7, #8
 8000202:	46bd      	mov	sp, r7
 8000204:	bd80      	pop	{r7, pc}
 8000206:	bf00      	nop
 8000208:	2000001c 	.word	0x2000001c

0800020c <adxl_write>:

void adxl_write(uint8_t reg,char value)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b084      	sub	sp, #16
 8000210:	af00      	add	r7, sp, #0
 8000212:	4603      	mov	r3, r0
 8000214:	460a      	mov	r2, r1
 8000216:	71fb      	strb	r3, [r7, #7]
 8000218:	4613      	mov	r3, r2
 800021a:	71bb      	strb	r3, [r7, #6]
	char data[1];

	data[0]=value;// buffer that contains the information that we want to write to the slave
 800021c:	79bb      	ldrb	r3, [r7, #6]
 800021e:	733b      	strb	r3, [r7, #12]

	I2C1_burstWrite(DEVICE_ADDR,reg,1,data);
 8000220:	f107 030c 	add.w	r3, r7, #12
 8000224:	79f9      	ldrb	r1, [r7, #7]
 8000226:	2201      	movs	r2, #1
 8000228:	2053      	movs	r0, #83	; 0x53
 800022a:	f000 f9e5 	bl	80005f8 <I2C1_burstWrite>

}
 800022e:	bf00      	nop
 8000230:	3710      	adds	r7, #16
 8000232:	46bd      	mov	sp, r7
 8000234:	bd80      	pop	{r7, pc}
	...

08000238 <adxl_read_value>:

// since we have 6 data registers we will set the burst read length to 6

void adxl_read_value(uint8_t reg)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b082      	sub	sp, #8
 800023c:	af00      	add	r7, sp, #0
 800023e:	4603      	mov	r3, r0
 8000240:	71fb      	strb	r3, [r7, #7]
	 I2C1_BurstRead(DEVICE_ADDR,reg,6, (char*) data_rec);
 8000242:	79f9      	ldrb	r1, [r7, #7]
 8000244:	4b04      	ldr	r3, [pc, #16]	; (8000258 <adxl_read_value+0x20>)
 8000246:	2206      	movs	r2, #6
 8000248:	2053      	movs	r0, #83	; 0x53
 800024a:	f000 f937 	bl	80004bc <I2C1_BurstRead>
}
 800024e:	bf00      	nop
 8000250:	3708      	adds	r7, #8
 8000252:	46bd      	mov	sp, r7
 8000254:	bd80      	pop	{r7, pc}
 8000256:	bf00      	nop
 8000258:	20000020 	.word	0x20000020

0800025c <adxl_init>:

void adxl_init(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0

	// enable the I2C module
	i2c_init();
 8000260:	f000 f812 	bl	8000288 <i2c_init>


	// read the DEVID,This should return 0xE5 // this is for verification purpose
	adxl_read_address(DEVID_R);
 8000264:	2000      	movs	r0, #0
 8000266:	f7ff ffbf 	bl	80001e8 <adxl_read_address>


	// set the data front range to +-4g
	adxl_write(DATA_FORMAT_R,FOUR_G);
 800026a:	2101      	movs	r1, #1
 800026c:	2031      	movs	r0, #49	; 0x31
 800026e:	f7ff ffcd 	bl	800020c <adxl_write>


	// reset all bits
	adxl_write(POWER_CTL_R,RESET );
 8000272:	2100      	movs	r1, #0
 8000274:	202d      	movs	r0, #45	; 0x2d
 8000276:	f7ff ffc9 	bl	800020c <adxl_write>


	// configure power control measure bit
	adxl_write(POWER_CTL_R,SET_MEASURE_B);
 800027a:	2108      	movs	r1, #8
 800027c:	202d      	movs	r0, #45	; 0x2d
 800027e:	f7ff ffc5 	bl	800020c <adxl_write>

}
 8000282:	bf00      	nop
 8000284:	bd80      	pop	{r7, pc}
	...

08000288 <i2c_init>:
#define   SD_MODE_MAX_RISE_TIME      17
#define   CR1_PE          (1U<<0)


void i2c_init(void)
{
 8000288:	b480      	push	{r7}
 800028a:	af00      	add	r7, sp, #0
	/*             configure GPIOx                     */


	// clock access to GPIOB
	RCC->AHB1ENR|=GPIOBEN;
 800028c:	4b4d      	ldr	r3, [pc, #308]	; (80003c4 <i2c_init+0x13c>)
 800028e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000290:	4a4c      	ldr	r2, [pc, #304]	; (80003c4 <i2c_init+0x13c>)
 8000292:	f043 0302 	orr.w	r3, r3, #2
 8000296:	6313      	str	r3, [r2, #48]	; 0x30

	// enable SDA and SCL line in alternate function mapping of PB8 and PB9
	// PB8= SCL
	// PB9 =SDA
	// set booth pins to alternate function type
	GPIOB->MODER |=(1U<<17);
 8000298:	4b4b      	ldr	r3, [pc, #300]	; (80003c8 <i2c_init+0x140>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	4a4a      	ldr	r2, [pc, #296]	; (80003c8 <i2c_init+0x140>)
 800029e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002a2:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &=~(1U<<16);
 80002a4:	4b48      	ldr	r3, [pc, #288]	; (80003c8 <i2c_init+0x140>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4a47      	ldr	r2, [pc, #284]	; (80003c8 <i2c_init+0x140>)
 80002aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80002ae:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |=(1U<<19);
 80002b0:	4b45      	ldr	r3, [pc, #276]	; (80003c8 <i2c_init+0x140>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	4a44      	ldr	r2, [pc, #272]	; (80003c8 <i2c_init+0x140>)
 80002b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80002ba:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &=~(1U<<18);
 80002bc:	4b42      	ldr	r3, [pc, #264]	; (80003c8 <i2c_init+0x140>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	4a41      	ldr	r2, [pc, #260]	; (80003c8 <i2c_init+0x140>)
 80002c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80002c6:	6013      	str	r3, [r2, #0]

	//SET output drain in output type register
	GPIOB->OTYPER |=(1U<<8);
 80002c8:	4b3f      	ldr	r3, [pc, #252]	; (80003c8 <i2c_init+0x140>)
 80002ca:	685b      	ldr	r3, [r3, #4]
 80002cc:	4a3e      	ldr	r2, [pc, #248]	; (80003c8 <i2c_init+0x140>)
 80002ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002d2:	6053      	str	r3, [r2, #4]
	GPIOB->OTYPER |=(1U<<9);
 80002d4:	4b3c      	ldr	r3, [pc, #240]	; (80003c8 <i2c_init+0x140>)
 80002d6:	685b      	ldr	r3, [r3, #4]
 80002d8:	4a3b      	ldr	r2, [pc, #236]	; (80003c8 <i2c_init+0x140>)
 80002da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002de:	6053      	str	r3, [r2, #4]

	//enable pull up resistor for PB8 and PB9
	GPIOB->PUPDR |=(1U<<16);
 80002e0:	4b39      	ldr	r3, [pc, #228]	; (80003c8 <i2c_init+0x140>)
 80002e2:	68db      	ldr	r3, [r3, #12]
 80002e4:	4a38      	ldr	r2, [pc, #224]	; (80003c8 <i2c_init+0x140>)
 80002e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80002ea:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR &=~(1U<<17);
 80002ec:	4b36      	ldr	r3, [pc, #216]	; (80003c8 <i2c_init+0x140>)
 80002ee:	68db      	ldr	r3, [r3, #12]
 80002f0:	4a35      	ldr	r2, [pc, #212]	; (80003c8 <i2c_init+0x140>)
 80002f2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80002f6:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |=(1U<<18);
 80002f8:	4b33      	ldr	r3, [pc, #204]	; (80003c8 <i2c_init+0x140>)
 80002fa:	68db      	ldr	r3, [r3, #12]
 80002fc:	4a32      	ldr	r2, [pc, #200]	; (80003c8 <i2c_init+0x140>)
 80002fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000302:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR &=~(1U<<19);
 8000304:	4b30      	ldr	r3, [pc, #192]	; (80003c8 <i2c_init+0x140>)
 8000306:	68db      	ldr	r3, [r3, #12]
 8000308:	4a2f      	ldr	r2, [pc, #188]	; (80003c8 <i2c_init+0x140>)
 800030a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800030e:	60d3      	str	r3, [r2, #12]

	//set alternate function type to AF04
	GPIOB->AFR[1] &=~(1U<<0);
 8000310:	4b2d      	ldr	r3, [pc, #180]	; (80003c8 <i2c_init+0x140>)
 8000312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000314:	4a2c      	ldr	r2, [pc, #176]	; (80003c8 <i2c_init+0x140>)
 8000316:	f023 0301 	bic.w	r3, r3, #1
 800031a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] &=~(1U<<1);
 800031c:	4b2a      	ldr	r3, [pc, #168]	; (80003c8 <i2c_init+0x140>)
 800031e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000320:	4a29      	ldr	r2, [pc, #164]	; (80003c8 <i2c_init+0x140>)
 8000322:	f023 0302 	bic.w	r3, r3, #2
 8000326:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] |= (1U<<2);
 8000328:	4b27      	ldr	r3, [pc, #156]	; (80003c8 <i2c_init+0x140>)
 800032a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800032c:	4a26      	ldr	r2, [pc, #152]	; (80003c8 <i2c_init+0x140>)
 800032e:	f043 0304 	orr.w	r3, r3, #4
 8000332:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] &=~(1U<<3);
 8000334:	4b24      	ldr	r3, [pc, #144]	; (80003c8 <i2c_init+0x140>)
 8000336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000338:	4a23      	ldr	r2, [pc, #140]	; (80003c8 <i2c_init+0x140>)
 800033a:	f023 0308 	bic.w	r3, r3, #8
 800033e:	6253      	str	r3, [r2, #36]	; 0x24


	GPIOB->AFR[1] &=~(1U<<4);
 8000340:	4b21      	ldr	r3, [pc, #132]	; (80003c8 <i2c_init+0x140>)
 8000342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000344:	4a20      	ldr	r2, [pc, #128]	; (80003c8 <i2c_init+0x140>)
 8000346:	f023 0310 	bic.w	r3, r3, #16
 800034a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] &=~(1U<<5);
 800034c:	4b1e      	ldr	r3, [pc, #120]	; (80003c8 <i2c_init+0x140>)
 800034e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000350:	4a1d      	ldr	r2, [pc, #116]	; (80003c8 <i2c_init+0x140>)
 8000352:	f023 0320 	bic.w	r3, r3, #32
 8000356:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] |= (1U<<6);
 8000358:	4b1b      	ldr	r3, [pc, #108]	; (80003c8 <i2c_init+0x140>)
 800035a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800035c:	4a1a      	ldr	r2, [pc, #104]	; (80003c8 <i2c_init+0x140>)
 800035e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000362:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] &=~(1U<<7);
 8000364:	4b18      	ldr	r3, [pc, #96]	; (80003c8 <i2c_init+0x140>)
 8000366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000368:	4a17      	ldr	r2, [pc, #92]	; (80003c8 <i2c_init+0x140>)
 800036a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800036e:	6253      	str	r3, [r2, #36]	; 0x24


	/*      configure I2C      */
	// ENABLE CLOCK ACCESS
	RCC->APB1ENR |=I2C1EN ;
 8000370:	4b14      	ldr	r3, [pc, #80]	; (80003c4 <i2c_init+0x13c>)
 8000372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000374:	4a13      	ldr	r2, [pc, #76]	; (80003c4 <i2c_init+0x13c>)
 8000376:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800037a:	6413      	str	r3, [r2, #64]	; 0x40

	//Reset mode
	I2C1->CR1 |= I2C1_SWRST;
 800037c:	4b13      	ldr	r3, [pc, #76]	; (80003cc <i2c_init+0x144>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	4a12      	ldr	r2, [pc, #72]	; (80003cc <i2c_init+0x144>)
 8000382:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000386:	6013      	str	r3, [r2, #0]

	// come out of reset mode
	I2C1->CR1 &= ~I2C1_SWRST;
 8000388:	4b10      	ldr	r3, [pc, #64]	; (80003cc <i2c_init+0x144>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	4a0f      	ldr	r2, [pc, #60]	; (80003cc <i2c_init+0x144>)
 800038e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000392:	6013      	str	r3, [r2, #0]

	//set peripheral clock frequency
	I2C1->CR2  |= (1U<<4);
 8000394:	4b0d      	ldr	r3, [pc, #52]	; (80003cc <i2c_init+0x144>)
 8000396:	685b      	ldr	r3, [r3, #4]
 8000398:	4a0c      	ldr	r2, [pc, #48]	; (80003cc <i2c_init+0x144>)
 800039a:	f043 0310 	orr.w	r3, r3, #16
 800039e:	6053      	str	r3, [r2, #4]

	// set I2C TO STANDARD MODE ,100kHz clock
	I2C1->CCR = I2C_100KHZ;
 80003a0:	4b0a      	ldr	r3, [pc, #40]	; (80003cc <i2c_init+0x144>)
 80003a2:	2250      	movs	r2, #80	; 0x50
 80003a4:	61da      	str	r2, [r3, #28]

	// set rise time
	I2C1->TRISE =SD_MODE_MAX_RISE_TIME;
 80003a6:	4b09      	ldr	r3, [pc, #36]	; (80003cc <i2c_init+0x144>)
 80003a8:	2211      	movs	r2, #17
 80003aa:	621a      	str	r2, [r3, #32]

	// ENABLE I2C
	I2C1->CR1 |=CR1_PE;
 80003ac:	4b07      	ldr	r3, [pc, #28]	; (80003cc <i2c_init+0x144>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	4a06      	ldr	r2, [pc, #24]	; (80003cc <i2c_init+0x144>)
 80003b2:	f043 0301 	orr.w	r3, r3, #1
 80003b6:	6013      	str	r3, [r2, #0]

	/*It's important to note that the specific values used in the code, such as I2C_100KHZ and SD_MODE_MAX_RISE_TIME, are dependent on the desired configuration and the characteristics of your particular I2C communication setup.
	 * You may need to adjust these values based on your specific requirements and the hardware characteristics.
	 * */

}
 80003b8:	bf00      	nop
 80003ba:	46bd      	mov	sp, r7
 80003bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c0:	4770      	bx	lr
 80003c2:	bf00      	nop
 80003c4:	40023800 	.word	0x40023800
 80003c8:	40020400 	.word	0x40020400
 80003cc:	40005400 	.word	0x40005400

080003d0 <I2C1_ByteRead>:
#define  CR1_STOP    (1U<<9)



void I2C1_ByteRead(char saddr,char maddr,char* data)// address of slave,memory address within slave that we want to read from and third argument is the pointer of the data that we want to store the read data to.
{
 80003d0:	b480      	push	{r7}
 80003d2:	b085      	sub	sp, #20
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	4603      	mov	r3, r0
 80003d8:	603a      	str	r2, [r7, #0]
 80003da:	71fb      	strb	r3, [r7, #7]
 80003dc:	460b      	mov	r3, r1
 80003de:	71bb      	strb	r3, [r7, #6]
	// make a variable to empty status register

	volatile int temp=0;
 80003e0:	2300      	movs	r3, #0
 80003e2:	60fb      	str	r3, [r7, #12]

	// wait until bus is not busy
	while(I2C1->SR2 & SR2_BUSY)
 80003e4:	bf00      	nop
 80003e6:	4b34      	ldr	r3, [pc, #208]	; (80004b8 <I2C1_ByteRead+0xe8>)
 80003e8:	699b      	ldr	r3, [r3, #24]
 80003ea:	f003 0302 	and.w	r3, r3, #2
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d1f9      	bne.n	80003e6 <I2C1_ByteRead+0x16>
	{}

	// generate start condition
	I2C1->CR1 |=CR1_START;
 80003f2:	4b31      	ldr	r3, [pc, #196]	; (80004b8 <I2C1_ByteRead+0xe8>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	4a30      	ldr	r2, [pc, #192]	; (80004b8 <I2C1_ByteRead+0xe8>)
 80003f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003fc:	6013      	str	r3, [r2, #0]

	// wait for start
	while(!(I2C1->SR1 & SR1_SB))
 80003fe:	bf00      	nop
 8000400:	4b2d      	ldr	r3, [pc, #180]	; (80004b8 <I2C1_ByteRead+0xe8>)
 8000402:	695b      	ldr	r3, [r3, #20]
 8000404:	f003 0301 	and.w	r3, r3, #1
 8000408:	2b00      	cmp	r3, #0
 800040a:	d0f9      	beq.n	8000400 <I2C1_ByteRead+0x30>
	{}

	//transmit slave address + write mode
	I2C1->DR=saddr<<1;
 800040c:	79fb      	ldrb	r3, [r7, #7]
 800040e:	005a      	lsls	r2, r3, #1
 8000410:	4b29      	ldr	r3, [pc, #164]	; (80004b8 <I2C1_ByteRead+0xe8>)
 8000412:	611a      	str	r2, [r3, #16]

	//wait for address flag
	while(!(I2C1->DR & SR1_ADDR))
 8000414:	bf00      	nop
 8000416:	4b28      	ldr	r3, [pc, #160]	; (80004b8 <I2C1_ByteRead+0xe8>)
 8000418:	691b      	ldr	r3, [r3, #16]
 800041a:	f003 0302 	and.w	r3, r3, #2
 800041e:	2b00      	cmp	r3, #0
 8000420:	d0f9      	beq.n	8000416 <I2C1_ByteRead+0x46>
	{}

	//clear flag by reading data from status register
	temp=I2C1->SR2;
 8000422:	4b25      	ldr	r3, [pc, #148]	; (80004b8 <I2C1_ByteRead+0xe8>)
 8000424:	699b      	ldr	r3, [r3, #24]
 8000426:	60fb      	str	r3, [r7, #12]

	// send memory address that we want to read
	I2C1->DR= maddr;
 8000428:	4a23      	ldr	r2, [pc, #140]	; (80004b8 <I2C1_ByteRead+0xe8>)
 800042a:	79bb      	ldrb	r3, [r7, #6]
 800042c:	6113      	str	r3, [r2, #16]

	// wait until transmitter is empty
	while(!(I2C1->SR1 &SR1_TxE))
 800042e:	bf00      	nop
 8000430:	4b21      	ldr	r3, [pc, #132]	; (80004b8 <I2C1_ByteRead+0xe8>)
 8000432:	695b      	ldr	r3, [r3, #20]
 8000434:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000438:	2b00      	cmp	r3, #0
 800043a:	d0f9      	beq.n	8000430 <I2C1_ByteRead+0x60>
	{}

	// generate REstart condition
		I2C1->CR1|=CR1_START;
 800043c:	4b1e      	ldr	r3, [pc, #120]	; (80004b8 <I2C1_ByteRead+0xe8>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	4a1d      	ldr	r2, [pc, #116]	; (80004b8 <I2C1_ByteRead+0xe8>)
 8000442:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000446:	6013      	str	r3, [r2, #0]

	// wait for REstart
		while(!(I2C1->SR1 & SR1_SB))
 8000448:	bf00      	nop
 800044a:	4b1b      	ldr	r3, [pc, #108]	; (80004b8 <I2C1_ByteRead+0xe8>)
 800044c:	695b      	ldr	r3, [r3, #20]
 800044e:	f003 0301 	and.w	r3, r3, #1
 8000452:	2b00      	cmp	r3, #0
 8000454:	d0f9      	beq.n	800044a <I2C1_ByteRead+0x7a>
		{}

        // transmit slave address + read mode
	    I2C1->DR=saddr<<1 | 1;
 8000456:	79fb      	ldrb	r3, [r7, #7]
 8000458:	005b      	lsls	r3, r3, #1
 800045a:	f043 0201 	orr.w	r2, r3, #1
 800045e:	4b16      	ldr	r3, [pc, #88]	; (80004b8 <I2C1_ByteRead+0xe8>)
 8000460:	611a      	str	r2, [r3, #16]

	    //wait until address flag is set

		while(!(I2C1->DR &SR1_ADDR))
 8000462:	bf00      	nop
 8000464:	4b14      	ldr	r3, [pc, #80]	; (80004b8 <I2C1_ByteRead+0xe8>)
 8000466:	691b      	ldr	r3, [r3, #16]
 8000468:	f003 0302 	and.w	r3, r3, #2
 800046c:	2b00      	cmp	r3, #0
 800046e:	d0f9      	beq.n	8000464 <I2C1_ByteRead+0x94>
		{}

		//disable acknowlegdement bit
		I2C1->CR1 &=~CR1_ACK;
 8000470:	4b11      	ldr	r3, [pc, #68]	; (80004b8 <I2C1_ByteRead+0xe8>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	4a10      	ldr	r2, [pc, #64]	; (80004b8 <I2C1_ByteRead+0xe8>)
 8000476:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800047a:	6013      	str	r3, [r2, #0]


		//clear address flag by reading data from status register
		temp=I2C1->SR2;
 800047c:	4b0e      	ldr	r3, [pc, #56]	; (80004b8 <I2C1_ByteRead+0xe8>)
 800047e:	699b      	ldr	r3, [r3, #24]
 8000480:	60fb      	str	r3, [r7, #12]

		// generate stop condition
		I2C1->CR1 |=CR1_STOP;
 8000482:	4b0d      	ldr	r3, [pc, #52]	; (80004b8 <I2C1_ByteRead+0xe8>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	4a0c      	ldr	r2, [pc, #48]	; (80004b8 <I2C1_ByteRead+0xe8>)
 8000488:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800048c:	6013      	str	r3, [r2, #0]

		//Wait until RXNE flag is set
		while(!(I2C1->SR1 & SR1_RxNE))
 800048e:	bf00      	nop
 8000490:	4b09      	ldr	r3, [pc, #36]	; (80004b8 <I2C1_ByteRead+0xe8>)
 8000492:	695b      	ldr	r3, [r3, #20]
 8000494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000498:	2b00      	cmp	r3, #0
 800049a:	d0f9      	beq.n	8000490 <I2C1_ByteRead+0xc0>
		{}

		// READ from DATA REGISTER
		*data++ = I2C1->DR;
 800049c:	4b06      	ldr	r3, [pc, #24]	; (80004b8 <I2C1_ByteRead+0xe8>)
 800049e:	6919      	ldr	r1, [r3, #16]
 80004a0:	683b      	ldr	r3, [r7, #0]
 80004a2:	1c5a      	adds	r2, r3, #1
 80004a4:	603a      	str	r2, [r7, #0]
 80004a6:	b2ca      	uxtb	r2, r1
 80004a8:	701a      	strb	r2, [r3, #0]



}
 80004aa:	bf00      	nop
 80004ac:	3714      	adds	r7, #20
 80004ae:	46bd      	mov	sp, r7
 80004b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop
 80004b8:	40005400 	.word	0x40005400

080004bc <I2C1_BurstRead>:
void  I2C1_BurstRead(char saddr,char maddr,int n,char* data)
{
 80004bc:	b480      	push	{r7}
 80004be:	b087      	sub	sp, #28
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	60ba      	str	r2, [r7, #8]
 80004c4:	607b      	str	r3, [r7, #4]
 80004c6:	4603      	mov	r3, r0
 80004c8:	73fb      	strb	r3, [r7, #15]
 80004ca:	460b      	mov	r3, r1
 80004cc:	73bb      	strb	r3, [r7, #14]
	// make a variable to empty status register
		volatile int tmp=0;
 80004ce:	2300      	movs	r3, #0
 80004d0:	617b      	str	r3, [r7, #20]

		// wait until the bus is not empty

		while(I2C1->SR2 & SR2_BUSY)
 80004d2:	bf00      	nop
 80004d4:	4b47      	ldr	r3, [pc, #284]	; (80005f4 <I2C1_BurstRead+0x138>)
 80004d6:	699b      	ldr	r3, [r3, #24]
 80004d8:	f003 0302 	and.w	r3, r3, #2
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d1f9      	bne.n	80004d4 <I2C1_BurstRead+0x18>
			{}

			// generate start condition
			I2C1->CR1 |=CR1_START;
 80004e0:	4b44      	ldr	r3, [pc, #272]	; (80005f4 <I2C1_BurstRead+0x138>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a43      	ldr	r2, [pc, #268]	; (80005f4 <I2C1_BurstRead+0x138>)
 80004e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004ea:	6013      	str	r3, [r2, #0]

			// wait for start
			while(!(I2C1->SR1 & SR1_SB))
 80004ec:	bf00      	nop
 80004ee:	4b41      	ldr	r3, [pc, #260]	; (80005f4 <I2C1_BurstRead+0x138>)
 80004f0:	695b      	ldr	r3, [r3, #20]
 80004f2:	f003 0301 	and.w	r3, r3, #1
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d0f9      	beq.n	80004ee <I2C1_BurstRead+0x32>
			{}

			// transmit slave address and write
			// for write put 0 at least significant bit
			I2C1->DR =saddr<<1;
 80004fa:	7bfb      	ldrb	r3, [r7, #15]
 80004fc:	005a      	lsls	r2, r3, #1
 80004fe:	4b3d      	ldr	r3, [pc, #244]	; (80005f4 <I2C1_BurstRead+0x138>)
 8000500:	611a      	str	r2, [r3, #16]

			//wait for address flag
			while(!(I2C1->DR &SR1_ADDR))
 8000502:	bf00      	nop
 8000504:	4b3b      	ldr	r3, [pc, #236]	; (80005f4 <I2C1_BurstRead+0x138>)
 8000506:	691b      	ldr	r3, [r3, #16]
 8000508:	f003 0302 	and.w	r3, r3, #2
 800050c:	2b00      	cmp	r3, #0
 800050e:	d0f9      	beq.n	8000504 <I2C1_BurstRead+0x48>
			{}

			// clear status register by reading from it
			tmp=I2C1->SR2;
 8000510:	4b38      	ldr	r3, [pc, #224]	; (80005f4 <I2C1_BurstRead+0x138>)
 8000512:	699b      	ldr	r3, [r3, #24]
 8000514:	617b      	str	r3, [r7, #20]

			// wait until transmitter is empty
			// means data register is now empty as transmission is complete

			while(!(I2C1->SR1 & SR1_TxE))
 8000516:	bf00      	nop
 8000518:	4b36      	ldr	r3, [pc, #216]	; (80005f4 <I2C1_BurstRead+0x138>)
 800051a:	695b      	ldr	r3, [r3, #20]
 800051c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000520:	2b00      	cmp	r3, #0
 8000522:	d0f9      	beq.n	8000518 <I2C1_BurstRead+0x5c>
			{}

			// send memory address that we want to read
			I2C1->DR= maddr;
 8000524:	4a33      	ldr	r2, [pc, #204]	; (80005f4 <I2C1_BurstRead+0x138>)
 8000526:	7bbb      	ldrb	r3, [r7, #14]
 8000528:	6113      	str	r3, [r2, #16]

			// wait until transmitter is empty
	        while(!(I2C1->SR1 & SR1_TxE))
 800052a:	bf00      	nop
 800052c:	4b31      	ldr	r3, [pc, #196]	; (80005f4 <I2C1_BurstRead+0x138>)
 800052e:	695b      	ldr	r3, [r3, #20]
 8000530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000534:	2b00      	cmp	r3, #0
 8000536:	d0f9      	beq.n	800052c <I2C1_BurstRead+0x70>
			{}
	        // generate a restart condition
	        I2C1->CR1 |=CR1_START;
 8000538:	4b2e      	ldr	r3, [pc, #184]	; (80005f4 <I2C1_BurstRead+0x138>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4a2d      	ldr	r2, [pc, #180]	; (80005f4 <I2C1_BurstRead+0x138>)
 800053e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000542:	6013      	str	r3, [r2, #0]

	        // wait for start
	        while(!(I2C1->SR1 & SR1_SB))
 8000544:	bf00      	nop
 8000546:	4b2b      	ldr	r3, [pc, #172]	; (80005f4 <I2C1_BurstRead+0x138>)
 8000548:	695b      	ldr	r3, [r3, #20]
 800054a:	f003 0301 	and.w	r3, r3, #1
 800054e:	2b00      	cmp	r3, #0
 8000550:	d0f9      	beq.n	8000546 <I2C1_BurstRead+0x8a>
	        {}

	        //transmit the slave address and read
	        I2C1->DR= saddr<<1 |1;
 8000552:	7bfb      	ldrb	r3, [r7, #15]
 8000554:	005b      	lsls	r3, r3, #1
 8000556:	f043 0201 	orr.w	r2, r3, #1
 800055a:	4b26      	ldr	r3, [pc, #152]	; (80005f4 <I2C1_BurstRead+0x138>)
 800055c:	611a      	str	r2, [r3, #16]

	        //wait for address flag
	        while(!(I2C1->DR &SR1_ADDR))
 800055e:	bf00      	nop
 8000560:	4b24      	ldr	r3, [pc, #144]	; (80005f4 <I2C1_BurstRead+0x138>)
 8000562:	691b      	ldr	r3, [r3, #16]
 8000564:	f003 0302 	and.w	r3, r3, #2
 8000568:	2b00      	cmp	r3, #0
 800056a:	d0f9      	beq.n	8000560 <I2C1_BurstRead+0xa4>
	        {}

	        // clear status register flag
	        tmp=I2C1->SR2;
 800056c:	4b21      	ldr	r3, [pc, #132]	; (80005f4 <I2C1_BurstRead+0x138>)
 800056e:	699b      	ldr	r3, [r3, #24]
 8000570:	617b      	str	r3, [r7, #20]

	        // enable acknowledgment bit
	        I2C1->CR1 |=CR1_ACK;
 8000572:	4b20      	ldr	r3, [pc, #128]	; (80005f4 <I2C1_BurstRead+0x138>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	4a1f      	ldr	r2, [pc, #124]	; (80005f4 <I2C1_BurstRead+0x138>)
 8000578:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800057c:	6013      	str	r3, [r2, #0]

	        while(n>0U)
 800057e:	e02e      	b.n	80005de <I2C1_BurstRead+0x122>
	        {
	        	// we will check if one byte is left here and we will decrement the value  of n

	        	if(n==1U)// only one byte is left
 8000580:	68bb      	ldr	r3, [r7, #8]
 8000582:	2b01      	cmp	r3, #1
 8000584:	d11a      	bne.n	80005bc <I2C1_BurstRead+0x100>
	        	{
	        		// disable the acknowlegement bit
	        		I2C1->CR1 &=~CR1_ACK;
 8000586:	4b1b      	ldr	r3, [pc, #108]	; (80005f4 <I2C1_BurstRead+0x138>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4a1a      	ldr	r2, [pc, #104]	; (80005f4 <I2C1_BurstRead+0x138>)
 800058c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000590:	6013      	str	r3, [r2, #0]

	        		// generate stop
	        		I2C1->CR1 |=CR1_STOP;
 8000592:	4b18      	ldr	r3, [pc, #96]	; (80005f4 <I2C1_BurstRead+0x138>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4a17      	ldr	r2, [pc, #92]	; (80005f4 <I2C1_BurstRead+0x138>)
 8000598:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800059c:	6013      	str	r3, [r2, #0]

	        		// wait for RXnE flag to be set
	        		while(!(I2C1->SR1 & SR1_RxNE))
 800059e:	bf00      	nop
 80005a0:	4b14      	ldr	r3, [pc, #80]	; (80005f4 <I2C1_BurstRead+0x138>)
 80005a2:	695b      	ldr	r3, [r3, #20]
 80005a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d0f9      	beq.n	80005a0 <I2C1_BurstRead+0xe4>
	        		{}

	        		// read from the data register
	        		*data++=I2C1->DR;
 80005ac:	4b11      	ldr	r3, [pc, #68]	; (80005f4 <I2C1_BurstRead+0x138>)
 80005ae:	6919      	ldr	r1, [r3, #16]
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	1c5a      	adds	r2, r3, #1
 80005b4:	607a      	str	r2, [r7, #4]
 80005b6:	b2ca      	uxtb	r2, r1
 80005b8:	701a      	strb	r2, [r3, #0]

	        		break;
 80005ba:	e014      	b.n	80005e6 <I2C1_BurstRead+0x12a>

	        	}
	        	else
	        	{
	        		// wait for RXnE flag to be set
	        		while(!(I2C1->SR1 & SR1_RxNE))
 80005bc:	bf00      	nop
 80005be:	4b0d      	ldr	r3, [pc, #52]	; (80005f4 <I2C1_BurstRead+0x138>)
 80005c0:	695b      	ldr	r3, [r3, #20]
 80005c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d0f9      	beq.n	80005be <I2C1_BurstRead+0x102>
	        		{}

	        		//read from the data register
	        		*data++=I2C1->DR;
 80005ca:	4b0a      	ldr	r3, [pc, #40]	; (80005f4 <I2C1_BurstRead+0x138>)
 80005cc:	6919      	ldr	r1, [r3, #16]
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	1c5a      	adds	r2, r3, #1
 80005d2:	607a      	str	r2, [r7, #4]
 80005d4:	b2ca      	uxtb	r2, r1
 80005d6:	701a      	strb	r2, [r3, #0]

	        		n--;
 80005d8:	68bb      	ldr	r3, [r7, #8]
 80005da:	3b01      	subs	r3, #1
 80005dc:	60bb      	str	r3, [r7, #8]
	        while(n>0U)
 80005de:	68bb      	ldr	r3, [r7, #8]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d1cd      	bne.n	8000580 <I2C1_BurstRead+0xc4>
	        	}
	        }
}
 80005e4:	bf00      	nop
 80005e6:	bf00      	nop
 80005e8:	371c      	adds	r7, #28
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	40005400 	.word	0x40005400

080005f8 <I2C1_burstWrite>:

#define SR1_BTF  (1U<<2)


void I2C1_burstWrite(char saddr,char maddr,int n ,char* data)// this time we will write to the slave device
{
 80005f8:	b480      	push	{r7}
 80005fa:	b087      	sub	sp, #28
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	60ba      	str	r2, [r7, #8]
 8000600:	607b      	str	r3, [r7, #4]
 8000602:	4603      	mov	r3, r0
 8000604:	73fb      	strb	r3, [r7, #15]
 8000606:	460b      	mov	r3, r1
 8000608:	73bb      	strb	r3, [r7, #14]
	volatile int tmp=0;
 800060a:	2300      	movs	r3, #0
 800060c:	613b      	str	r3, [r7, #16]

	// wait until the bus is not busy
	while(I2C1->SR2 & SR2_BUSY)
 800060e:	bf00      	nop
 8000610:	4b27      	ldr	r3, [pc, #156]	; (80006b0 <I2C1_burstWrite+0xb8>)
 8000612:	699b      	ldr	r3, [r3, #24]
 8000614:	f003 0302 	and.w	r3, r3, #2
 8000618:	2b00      	cmp	r3, #0
 800061a:	d1f9      	bne.n	8000610 <I2C1_burstWrite+0x18>
	{}

	// generate start condition
	I2C1->CR1 |=CR1_START;
 800061c:	4b24      	ldr	r3, [pc, #144]	; (80006b0 <I2C1_burstWrite+0xb8>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a23      	ldr	r2, [pc, #140]	; (80006b0 <I2C1_burstWrite+0xb8>)
 8000622:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000626:	6013      	str	r3, [r2, #0]

	// wait for start
	while(!(I2C1->SR1 & SR1_SB))
 8000628:	bf00      	nop
 800062a:	4b21      	ldr	r3, [pc, #132]	; (80006b0 <I2C1_burstWrite+0xb8>)
 800062c:	695b      	ldr	r3, [r3, #20]
 800062e:	f003 0301 	and.w	r3, r3, #1
 8000632:	2b00      	cmp	r3, #0
 8000634:	d0f9      	beq.n	800062a <I2C1_burstWrite+0x32>
	{}

	// transmit slave address and write
	I2C1->DR =saddr<<1;
 8000636:	7bfb      	ldrb	r3, [r7, #15]
 8000638:	005a      	lsls	r2, r3, #1
 800063a:	4b1d      	ldr	r3, [pc, #116]	; (80006b0 <I2C1_burstWrite+0xb8>)
 800063c:	611a      	str	r2, [r3, #16]

	//wait for address flag
	while(!(I2C1->DR &SR1_ADDR))
 800063e:	bf00      	nop
 8000640:	4b1b      	ldr	r3, [pc, #108]	; (80006b0 <I2C1_burstWrite+0xb8>)
 8000642:	691b      	ldr	r3, [r3, #16]
 8000644:	f003 0302 	and.w	r3, r3, #2
 8000648:	2b00      	cmp	r3, #0
 800064a:	d0f9      	beq.n	8000640 <I2C1_burstWrite+0x48>
	{}

	// clear status register by reading from it
	tmp=I2C1->SR2;
 800064c:	4b18      	ldr	r3, [pc, #96]	; (80006b0 <I2C1_burstWrite+0xb8>)
 800064e:	699b      	ldr	r3, [r3, #24]
 8000650:	613b      	str	r3, [r7, #16]

	// wait until transmitter is empty
	// means data register is now empty as transmission is complete
	while(!(I2C1->SR1 & SR1_TxE))
 8000652:	bf00      	nop
 8000654:	4b16      	ldr	r3, [pc, #88]	; (80006b0 <I2C1_burstWrite+0xb8>)
 8000656:	695b      	ldr	r3, [r3, #20]
 8000658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800065c:	2b00      	cmp	r3, #0
 800065e:	d0f9      	beq.n	8000654 <I2C1_burstWrite+0x5c>
	{}

	// send memory address
	I2C1->DR= maddr;
 8000660:	4a13      	ldr	r2, [pc, #76]	; (80006b0 <I2C1_burstWrite+0xb8>)
 8000662:	7bbb      	ldrb	r3, [r7, #14]
 8000664:	6113      	str	r3, [r2, #16]

	for(int i=0;i<n;i++)
 8000666:	2300      	movs	r3, #0
 8000668:	617b      	str	r3, [r7, #20]
 800066a:	e00f      	b.n	800068c <I2C1_burstWrite+0x94>
	{
		// wait until data register is empty
		while(!(I2C1->SR1 & SR1_TxE))
 800066c:	bf00      	nop
 800066e:	4b10      	ldr	r3, [pc, #64]	; (80006b0 <I2C1_burstWrite+0xb8>)
 8000670:	695b      	ldr	r3, [r3, #20]
 8000672:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000676:	2b00      	cmp	r3, #0
 8000678:	d0f9      	beq.n	800066e <I2C1_burstWrite+0x76>
		{}

		// transmit memory address
		I2C1->DR = *data++;// it will point to the next address because the written element is something like array
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	1c5a      	adds	r2, r3, #1
 800067e:	607a      	str	r2, [r7, #4]
 8000680:	781a      	ldrb	r2, [r3, #0]
 8000682:	4b0b      	ldr	r3, [pc, #44]	; (80006b0 <I2C1_burstWrite+0xb8>)
 8000684:	611a      	str	r2, [r3, #16]
	for(int i=0;i<n;i++)
 8000686:	697b      	ldr	r3, [r7, #20]
 8000688:	3301      	adds	r3, #1
 800068a:	617b      	str	r3, [r7, #20]
 800068c:	697a      	ldr	r2, [r7, #20]
 800068e:	68bb      	ldr	r3, [r7, #8]
 8000690:	429a      	cmp	r2, r3
 8000692:	dbeb      	blt.n	800066c <I2C1_burstWrite+0x74>


	}
	// wait until transfer is finished
	while(!(I2C1->SR1 & SR1_BTF ))
 8000694:	bf00      	nop
 8000696:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <I2C1_burstWrite+0xb8>)
 8000698:	695b      	ldr	r3, [r3, #20]
 800069a:	f003 0304 	and.w	r3, r3, #4
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d0f9      	beq.n	8000696 <I2C1_burstWrite+0x9e>
	{
	}


}
 80006a2:	bf00      	nop
 80006a4:	bf00      	nop
 80006a6:	371c      	adds	r7, #28
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr
 80006b0:	40005400 	.word	0x40005400

080006b4 <main>:
const float FOUR_G_SCLAE_FACT = 0.0078;

extern uint8_t data_rec[6];

int main()
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
	adxl_init();
 80006b8:	f7ff fdd0 	bl	800025c <adxl_init>

	while(1)
	{
		adxl_read_value(DATA_START_ADDR);
 80006bc:	2032      	movs	r0, #50	; 0x32
 80006be:	f7ff fdbb 	bl	8000238 <adxl_read_value>
		// we stored read values in a buffer named data_rec

		x=((data_rec[1]<<8)|data_rec[0]);
 80006c2:	4b26      	ldr	r3, [pc, #152]	; (800075c <main+0xa8>)
 80006c4:	785b      	ldrb	r3, [r3, #1]
 80006c6:	021b      	lsls	r3, r3, #8
 80006c8:	b21a      	sxth	r2, r3
 80006ca:	4b24      	ldr	r3, [pc, #144]	; (800075c <main+0xa8>)
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	b21b      	sxth	r3, r3
 80006d0:	4313      	orrs	r3, r2
 80006d2:	b21a      	sxth	r2, r3
 80006d4:	4b22      	ldr	r3, [pc, #136]	; (8000760 <main+0xac>)
 80006d6:	801a      	strh	r2, [r3, #0]
		y=((data_rec[3]<<8)|data_rec[2]);
 80006d8:	4b20      	ldr	r3, [pc, #128]	; (800075c <main+0xa8>)
 80006da:	78db      	ldrb	r3, [r3, #3]
 80006dc:	021b      	lsls	r3, r3, #8
 80006de:	b21a      	sxth	r2, r3
 80006e0:	4b1e      	ldr	r3, [pc, #120]	; (800075c <main+0xa8>)
 80006e2:	789b      	ldrb	r3, [r3, #2]
 80006e4:	b21b      	sxth	r3, r3
 80006e6:	4313      	orrs	r3, r2
 80006e8:	b21a      	sxth	r2, r3
 80006ea:	4b1e      	ldr	r3, [pc, #120]	; (8000764 <main+0xb0>)
 80006ec:	801a      	strh	r2, [r3, #0]
		z=((data_rec[5]<<8)|data_rec[4]);
 80006ee:	4b1b      	ldr	r3, [pc, #108]	; (800075c <main+0xa8>)
 80006f0:	795b      	ldrb	r3, [r3, #5]
 80006f2:	021b      	lsls	r3, r3, #8
 80006f4:	b21a      	sxth	r2, r3
 80006f6:	4b19      	ldr	r3, [pc, #100]	; (800075c <main+0xa8>)
 80006f8:	791b      	ldrb	r3, [r3, #4]
 80006fa:	b21b      	sxth	r3, r3
 80006fc:	4313      	orrs	r3, r2
 80006fe:	b21a      	sxth	r2, r3
 8000700:	4b19      	ldr	r3, [pc, #100]	; (8000768 <main+0xb4>)
 8000702:	801a      	strh	r2, [r3, #0]


		xg = x * FOUR_G_SCLAE_FACT;
 8000704:	4b16      	ldr	r3, [pc, #88]	; (8000760 <main+0xac>)
 8000706:	f9b3 3000 	ldrsh.w	r3, [r3]
 800070a:	ee07 3a90 	vmov	s15, r3
 800070e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000712:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800076c <main+0xb8>
 8000716:	ee67 7a87 	vmul.f32	s15, s15, s14
 800071a:	4b15      	ldr	r3, [pc, #84]	; (8000770 <main+0xbc>)
 800071c:	edc3 7a00 	vstr	s15, [r3]
		yg = y * FOUR_G_SCLAE_FACT;
 8000720:	4b10      	ldr	r3, [pc, #64]	; (8000764 <main+0xb0>)
 8000722:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000726:	ee07 3a90 	vmov	s15, r3
 800072a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800072e:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800076c <main+0xb8>
 8000732:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000736:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <main+0xc0>)
 8000738:	edc3 7a00 	vstr	s15, [r3]
		zg = z * FOUR_G_SCLAE_FACT;
 800073c:	4b0a      	ldr	r3, [pc, #40]	; (8000768 <main+0xb4>)
 800073e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000742:	ee07 3a90 	vmov	s15, r3
 8000746:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800074a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800076c <main+0xb8>
 800074e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000752:	4b09      	ldr	r3, [pc, #36]	; (8000778 <main+0xc4>)
 8000754:	edc3 7a00 	vstr	s15, [r3]
		adxl_read_value(DATA_START_ADDR);
 8000758:	e7b0      	b.n	80006bc <main+0x8>
 800075a:	bf00      	nop
 800075c:	20000020 	.word	0x20000020
 8000760:	20000026 	.word	0x20000026
 8000764:	20000028 	.word	0x20000028
 8000768:	2000002a 	.word	0x2000002a
 800076c:	3bff9724 	.word	0x3bff9724
 8000770:	2000002c 	.word	0x2000002c
 8000774:	20000030 	.word	0x20000030
 8000778:	20000034 	.word	0x20000034

0800077c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800077c:	480d      	ldr	r0, [pc, #52]	; (80007b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800077e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000780:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000784:	480c      	ldr	r0, [pc, #48]	; (80007b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000786:	490d      	ldr	r1, [pc, #52]	; (80007bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000788:	4a0d      	ldr	r2, [pc, #52]	; (80007c0 <LoopForever+0xe>)
  movs r3, #0
 800078a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800078c:	e002      	b.n	8000794 <LoopCopyDataInit>

0800078e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800078e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000790:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000792:	3304      	adds	r3, #4

08000794 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000794:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000796:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000798:	d3f9      	bcc.n	800078e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800079a:	4a0a      	ldr	r2, [pc, #40]	; (80007c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800079c:	4c0a      	ldr	r4, [pc, #40]	; (80007c8 <LoopForever+0x16>)
  movs r3, #0
 800079e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007a0:	e001      	b.n	80007a6 <LoopFillZerobss>

080007a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007a4:	3204      	adds	r2, #4

080007a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007a8:	d3fb      	bcc.n	80007a2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007aa:	f000 f811 	bl	80007d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007ae:	f7ff ff81 	bl	80006b4 <main>

080007b2 <LoopForever>:

LoopForever:
  b LoopForever
 80007b2:	e7fe      	b.n	80007b2 <LoopForever>
  ldr   r0, =_estack
 80007b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007bc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80007c0:	08000838 	.word	0x08000838
  ldr r2, =_sbss
 80007c4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80007c8:	20000038 	.word	0x20000038

080007cc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007cc:	e7fe      	b.n	80007cc <ADC_IRQHandler>
	...

080007d0 <__libc_init_array>:
 80007d0:	b570      	push	{r4, r5, r6, lr}
 80007d2:	4d0d      	ldr	r5, [pc, #52]	; (8000808 <__libc_init_array+0x38>)
 80007d4:	4c0d      	ldr	r4, [pc, #52]	; (800080c <__libc_init_array+0x3c>)
 80007d6:	1b64      	subs	r4, r4, r5
 80007d8:	10a4      	asrs	r4, r4, #2
 80007da:	2600      	movs	r6, #0
 80007dc:	42a6      	cmp	r6, r4
 80007de:	d109      	bne.n	80007f4 <__libc_init_array+0x24>
 80007e0:	4d0b      	ldr	r5, [pc, #44]	; (8000810 <__libc_init_array+0x40>)
 80007e2:	4c0c      	ldr	r4, [pc, #48]	; (8000814 <__libc_init_array+0x44>)
 80007e4:	f000 f818 	bl	8000818 <_init>
 80007e8:	1b64      	subs	r4, r4, r5
 80007ea:	10a4      	asrs	r4, r4, #2
 80007ec:	2600      	movs	r6, #0
 80007ee:	42a6      	cmp	r6, r4
 80007f0:	d105      	bne.n	80007fe <__libc_init_array+0x2e>
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80007f8:	4798      	blx	r3
 80007fa:	3601      	adds	r6, #1
 80007fc:	e7ee      	b.n	80007dc <__libc_init_array+0xc>
 80007fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8000802:	4798      	blx	r3
 8000804:	3601      	adds	r6, #1
 8000806:	e7f2      	b.n	80007ee <__libc_init_array+0x1e>
 8000808:	08000830 	.word	0x08000830
 800080c:	08000830 	.word	0x08000830
 8000810:	08000830 	.word	0x08000830
 8000814:	08000834 	.word	0x08000834

08000818 <_init>:
 8000818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800081a:	bf00      	nop
 800081c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800081e:	bc08      	pop	{r3}
 8000820:	469e      	mov	lr, r3
 8000822:	4770      	bx	lr

08000824 <_fini>:
 8000824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000826:	bf00      	nop
 8000828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800082a:	bc08      	pop	{r3}
 800082c:	469e      	mov	lr, r3
 800082e:	4770      	bx	lr
