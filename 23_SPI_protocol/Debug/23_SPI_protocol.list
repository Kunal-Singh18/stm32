
23_SPI_protocol.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000514  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080006bc  080006c4  000106c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080006bc  080006bc  000106c4  2**0
                  CONTENTS
  4 .ARM          00000000  080006bc  080006bc  000106c4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080006bc  080006c4  000106c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080006bc  080006bc  000106bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080006c0  080006c0  000106c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000106c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000106c4  2**0
                  CONTENTS
 10 .bss          00000038  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000038  20000038  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000106c4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000106f4  2**0
                  CONTENTS, READONLY
 14 .debug_info   00000730  00000000  00000000  00010737  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000002f9  00000000  00000000  00010e67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000000c0  00000000  00000000  00011160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000007f  00000000  00000000  00011220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00001d92  00000000  00000000  0001129f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00001252  00000000  00000000  00013031  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0008bd8b  00000000  00000000  00014283  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000001ac  00000000  00000000  000a0010  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004a  00000000  00000000  000a01bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080006a4 	.word	0x080006a4

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	080006a4 	.word	0x080006a4

080001e8 <adxl_read_address>:
#define   MULTI_BYTE_EN      (0x40)
#define   READ_OPERATION     (0x80)


void adxl_read_address(uint8_t address,uint8_t *rx)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b082      	sub	sp, #8
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	4603      	mov	r3, r0
 80001f0:	6039      	str	r1, [r7, #0]
 80001f2:	71fb      	strb	r3, [r7, #7]

	/*Set read operation*/
	address |=READ_OPERATION;
 80001f4:	79fb      	ldrb	r3, [r7, #7]
 80001f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80001fa:	71fb      	strb	r3, [r7, #7]

	/*Enable multi-byte*/
	address |=MULTI_BYTE_EN;
 80001fc:	79fb      	ldrb	r3, [r7, #7]
 80001fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000202:	71fb      	strb	r3, [r7, #7]

	/*Pull cd line low to enable the slave*/
	cs_enable();
 8000204:	f000 f9e0 	bl	80005c8 <cs_enable>

	/*send address */
	spi1_transmit(address,1);
 8000208:	79fb      	ldrb	r3, [r7, #7]
 800020a:	2101      	movs	r1, #1
 800020c:	4618      	mov	r0, r3
 800020e:	f000 f97b 	bl	8000508 <spi1_transmit>

	/*enable 6 bytes*/
	spi1_receive(rx,6);
 8000212:	2106      	movs	r1, #6
 8000214:	6838      	ldr	r0, [r7, #0]
 8000216:	f000 f9b1 	bl	800057c <spi1_receive>

}
 800021a:	bf00      	nop
 800021c:	3708      	adds	r7, #8
 800021e:	46bd      	mov	sp, r7
 8000220:	bd80      	pop	{r7, pc}

08000222 <adxl_write>:

void adxl_write(uint8_t address,uint8_t value)
{
 8000222:	b580      	push	{r7, lr}
 8000224:	b084      	sub	sp, #16
 8000226:	af00      	add	r7, sp, #0
 8000228:	4603      	mov	r3, r0
 800022a:	460a      	mov	r2, r1
 800022c:	71fb      	strb	r3, [r7, #7]
 800022e:	4613      	mov	r3, r2
 8000230:	71bb      	strb	r3, [r7, #6]
uint8_t data[2];
/*Enable multi-byte,place address into bufffer*/
data[0]=address|MULTI_BYTE_EN;
 8000232:	79fb      	ldrb	r3, [r7, #7]
 8000234:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000238:	b2db      	uxtb	r3, r3
 800023a:	733b      	strb	r3, [r7, #12]

/*place data into buffer*/
data[1]=value;
 800023c:	79bb      	ldrb	r3, [r7, #6]
 800023e:	737b      	strb	r3, [r7, #13]


/*pull cs line low to enable slave*/
cs_enable();
 8000240:	f000 f9c2 	bl	80005c8 <cs_enable>

/*Transmit data and address*/
spi1_transmit(data,2);
 8000244:	f107 030c 	add.w	r3, r7, #12
 8000248:	2102      	movs	r1, #2
 800024a:	4618      	mov	r0, r3
 800024c:	f000 f95c 	bl	8000508 <spi1_transmit>

/*Pull cs line high to disable the slave.*/
cs_disable();
 8000250:	f000 f9ca 	bl	80005e8 <cs_disable>


}
 8000254:	bf00      	nop
 8000256:	3710      	adds	r7, #16
 8000258:	46bd      	mov	sp, r7
 800025a:	bd80      	pop	{r7, pc}

0800025c <adxl_init>:


void adxl_init(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0

	/*enable the SPIO GPIO*/
	spi_gpio_init();
 8000260:	f000 f874 	bl	800034c <spi_gpio_init>

	/*Enable SPI config*/
	spi1_config();
 8000264:	f000 f8fc 	bl	8000460 <spi1_config>


	// set the data front range to +-4g
	adxl_write(DATA_FORMAT_R,FOUR_G);
 8000268:	2101      	movs	r1, #1
 800026a:	2031      	movs	r0, #49	; 0x31
 800026c:	f7ff ffd9 	bl	8000222 <adxl_write>


	// reset all bits
	adxl_write(POWER_CTL_R,RESET );
 8000270:	2100      	movs	r1, #0
 8000272:	202d      	movs	r0, #45	; 0x2d
 8000274:	f7ff ffd5 	bl	8000222 <adxl_write>


	// configure power control measure bit
	adxl_write(POWER_CTL_R,SET_MEASURE_B);
 8000278:	2108      	movs	r1, #8
 800027a:	202d      	movs	r0, #45	; 0x2d
 800027c:	f7ff ffd1 	bl	8000222 <adxl_write>

}
 8000280:	bf00      	nop
 8000282:	bd80      	pop	{r7, pc}

08000284 <main>:
const float FOUR_G_SCLAE_FACT = 0.0078;

 uint8_t data_rec[6];

int main()
{
 8000284:	b580      	push	{r7, lr}
 8000286:	af00      	add	r7, sp, #0
	adxl_init();
 8000288:	f7ff ffe8 	bl	800025c <adxl_init>

	while(1)
	{
		adxl_read_address(DATA_START_ADDR,data_rec);
 800028c:	4927      	ldr	r1, [pc, #156]	; (800032c <main+0xa8>)
 800028e:	2032      	movs	r0, #50	; 0x32
 8000290:	f7ff ffaa 	bl	80001e8 <adxl_read_address>
		// we stored read values in a buffer named data_rec

		x=((data_rec[1]<<8)|data_rec[0]);
 8000294:	4b25      	ldr	r3, [pc, #148]	; (800032c <main+0xa8>)
 8000296:	785b      	ldrb	r3, [r3, #1]
 8000298:	021b      	lsls	r3, r3, #8
 800029a:	b21a      	sxth	r2, r3
 800029c:	4b23      	ldr	r3, [pc, #140]	; (800032c <main+0xa8>)
 800029e:	781b      	ldrb	r3, [r3, #0]
 80002a0:	b21b      	sxth	r3, r3
 80002a2:	4313      	orrs	r3, r2
 80002a4:	b21a      	sxth	r2, r3
 80002a6:	4b22      	ldr	r3, [pc, #136]	; (8000330 <main+0xac>)
 80002a8:	801a      	strh	r2, [r3, #0]
		y=((data_rec[3]<<8)|data_rec[2]);
 80002aa:	4b20      	ldr	r3, [pc, #128]	; (800032c <main+0xa8>)
 80002ac:	78db      	ldrb	r3, [r3, #3]
 80002ae:	021b      	lsls	r3, r3, #8
 80002b0:	b21a      	sxth	r2, r3
 80002b2:	4b1e      	ldr	r3, [pc, #120]	; (800032c <main+0xa8>)
 80002b4:	789b      	ldrb	r3, [r3, #2]
 80002b6:	b21b      	sxth	r3, r3
 80002b8:	4313      	orrs	r3, r2
 80002ba:	b21a      	sxth	r2, r3
 80002bc:	4b1d      	ldr	r3, [pc, #116]	; (8000334 <main+0xb0>)
 80002be:	801a      	strh	r2, [r3, #0]
		z=((data_rec[5]<<8)|data_rec[4]);
 80002c0:	4b1a      	ldr	r3, [pc, #104]	; (800032c <main+0xa8>)
 80002c2:	795b      	ldrb	r3, [r3, #5]
 80002c4:	021b      	lsls	r3, r3, #8
 80002c6:	b21a      	sxth	r2, r3
 80002c8:	4b18      	ldr	r3, [pc, #96]	; (800032c <main+0xa8>)
 80002ca:	791b      	ldrb	r3, [r3, #4]
 80002cc:	b21b      	sxth	r3, r3
 80002ce:	4313      	orrs	r3, r2
 80002d0:	b21a      	sxth	r2, r3
 80002d2:	4b19      	ldr	r3, [pc, #100]	; (8000338 <main+0xb4>)
 80002d4:	801a      	strh	r2, [r3, #0]


		xg = x * FOUR_G_SCLAE_FACT;
 80002d6:	4b16      	ldr	r3, [pc, #88]	; (8000330 <main+0xac>)
 80002d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80002dc:	ee07 3a90 	vmov	s15, r3
 80002e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80002e4:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800033c <main+0xb8>
 80002e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80002ec:	4b14      	ldr	r3, [pc, #80]	; (8000340 <main+0xbc>)
 80002ee:	edc3 7a00 	vstr	s15, [r3]
		yg = y * FOUR_G_SCLAE_FACT;
 80002f2:	4b10      	ldr	r3, [pc, #64]	; (8000334 <main+0xb0>)
 80002f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80002f8:	ee07 3a90 	vmov	s15, r3
 80002fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000300:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800033c <main+0xb8>
 8000304:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000308:	4b0e      	ldr	r3, [pc, #56]	; (8000344 <main+0xc0>)
 800030a:	edc3 7a00 	vstr	s15, [r3]
		zg = z * FOUR_G_SCLAE_FACT;
 800030e:	4b0a      	ldr	r3, [pc, #40]	; (8000338 <main+0xb4>)
 8000310:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000314:	ee07 3a90 	vmov	s15, r3
 8000318:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800031c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800033c <main+0xb8>
 8000320:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000324:	4b08      	ldr	r3, [pc, #32]	; (8000348 <main+0xc4>)
 8000326:	edc3 7a00 	vstr	s15, [r3]
		adxl_read_address(DATA_START_ADDR,data_rec);
 800032a:	e7af      	b.n	800028c <main+0x8>
 800032c:	20000030 	.word	0x20000030
 8000330:	2000001c 	.word	0x2000001c
 8000334:	2000001e 	.word	0x2000001e
 8000338:	20000020 	.word	0x20000020
 800033c:	3bff9724 	.word	0x3bff9724
 8000340:	20000024 	.word	0x20000024
 8000344:	20000028 	.word	0x20000028
 8000348:	2000002c 	.word	0x2000002c

0800034c <spi_gpio_init>:
 * PA7 - MOSI
 * PA9 - SS(we can use any line for slave select) and it has to be set to output mode.
 * */

void spi_gpio_init(void)
{
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0

	/* enable clock access to GPIOA*/
	RCC->AHB1ENR |=GPIOAEN ;
 8000350:	4b41      	ldr	r3, [pc, #260]	; (8000458 <spi_gpio_init+0x10c>)
 8000352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000354:	4a40      	ldr	r2, [pc, #256]	; (8000458 <spi_gpio_init+0x10c>)
 8000356:	f043 0301 	orr.w	r3, r3, #1
 800035a:	6313      	str	r3, [r2, #48]	; 0x30


	/*SET PA5,PA6,PA7 to alternate function type*/
	GPIOA->MODER &=~(1U<<10);
 800035c:	4b3f      	ldr	r3, [pc, #252]	; (800045c <spi_gpio_init+0x110>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4a3e      	ldr	r2, [pc, #248]	; (800045c <spi_gpio_init+0x110>)
 8000362:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000366:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<11);
 8000368:	4b3c      	ldr	r3, [pc, #240]	; (800045c <spi_gpio_init+0x110>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	4a3b      	ldr	r2, [pc, #236]	; (800045c <spi_gpio_init+0x110>)
 800036e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000372:	6013      	str	r3, [r2, #0]

	GPIOA->MODER &=~(1U<<12);
 8000374:	4b39      	ldr	r3, [pc, #228]	; (800045c <spi_gpio_init+0x110>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	4a38      	ldr	r2, [pc, #224]	; (800045c <spi_gpio_init+0x110>)
 800037a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800037e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<13);
 8000380:	4b36      	ldr	r3, [pc, #216]	; (800045c <spi_gpio_init+0x110>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	4a35      	ldr	r2, [pc, #212]	; (800045c <spi_gpio_init+0x110>)
 8000386:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800038a:	6013      	str	r3, [r2, #0]


	GPIOA->MODER &=~(1U<<14);
 800038c:	4b33      	ldr	r3, [pc, #204]	; (800045c <spi_gpio_init+0x110>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4a32      	ldr	r2, [pc, #200]	; (800045c <spi_gpio_init+0x110>)
 8000392:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000396:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<15);
 8000398:	4b30      	ldr	r3, [pc, #192]	; (800045c <spi_gpio_init+0x110>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	4a2f      	ldr	r2, [pc, #188]	; (800045c <spi_gpio_init+0x110>)
 800039e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80003a2:	6013      	str	r3, [r2, #0]

	/*set PA9 to output type*/
	GPIOA->MODER &=~(1U<<19);
 80003a4:	4b2d      	ldr	r3, [pc, #180]	; (800045c <spi_gpio_init+0x110>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	4a2c      	ldr	r2, [pc, #176]	; (800045c <spi_gpio_init+0x110>)
 80003aa:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80003ae:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<18);
 80003b0:	4b2a      	ldr	r3, [pc, #168]	; (800045c <spi_gpio_init+0x110>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4a29      	ldr	r2, [pc, #164]	; (800045c <spi_gpio_init+0x110>)
 80003b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80003ba:	6013      	str	r3, [r2, #0]

	/*set alternate function type of PA5,PA6,PA7 to AF05*/
	GPIOA->AFR[0]|=(1U<<20);
 80003bc:	4b27      	ldr	r3, [pc, #156]	; (800045c <spi_gpio_init+0x110>)
 80003be:	6a1b      	ldr	r3, [r3, #32]
 80003c0:	4a26      	ldr	r2, [pc, #152]	; (800045c <spi_gpio_init+0x110>)
 80003c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80003c6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]&=~(1U<<21);
 80003c8:	4b24      	ldr	r3, [pc, #144]	; (800045c <spi_gpio_init+0x110>)
 80003ca:	6a1b      	ldr	r3, [r3, #32]
 80003cc:	4a23      	ldr	r2, [pc, #140]	; (800045c <spi_gpio_init+0x110>)
 80003ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80003d2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|=(1U<<22);
 80003d4:	4b21      	ldr	r3, [pc, #132]	; (800045c <spi_gpio_init+0x110>)
 80003d6:	6a1b      	ldr	r3, [r3, #32]
 80003d8:	4a20      	ldr	r2, [pc, #128]	; (800045c <spi_gpio_init+0x110>)
 80003da:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80003de:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]&=~(1U<<23);
 80003e0:	4b1e      	ldr	r3, [pc, #120]	; (800045c <spi_gpio_init+0x110>)
 80003e2:	6a1b      	ldr	r3, [r3, #32]
 80003e4:	4a1d      	ldr	r2, [pc, #116]	; (800045c <spi_gpio_init+0x110>)
 80003e6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80003ea:	6213      	str	r3, [r2, #32]

	GPIOA->AFR[0]|=(1U<<24);
 80003ec:	4b1b      	ldr	r3, [pc, #108]	; (800045c <spi_gpio_init+0x110>)
 80003ee:	6a1b      	ldr	r3, [r3, #32]
 80003f0:	4a1a      	ldr	r2, [pc, #104]	; (800045c <spi_gpio_init+0x110>)
 80003f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80003f6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]&=~(1U<<25);
 80003f8:	4b18      	ldr	r3, [pc, #96]	; (800045c <spi_gpio_init+0x110>)
 80003fa:	6a1b      	ldr	r3, [r3, #32]
 80003fc:	4a17      	ldr	r2, [pc, #92]	; (800045c <spi_gpio_init+0x110>)
 80003fe:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8000402:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|=(1U<<26);
 8000404:	4b15      	ldr	r3, [pc, #84]	; (800045c <spi_gpio_init+0x110>)
 8000406:	6a1b      	ldr	r3, [r3, #32]
 8000408:	4a14      	ldr	r2, [pc, #80]	; (800045c <spi_gpio_init+0x110>)
 800040a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800040e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]&=~(1U<<27);
 8000410:	4b12      	ldr	r3, [pc, #72]	; (800045c <spi_gpio_init+0x110>)
 8000412:	6a1b      	ldr	r3, [r3, #32]
 8000414:	4a11      	ldr	r2, [pc, #68]	; (800045c <spi_gpio_init+0x110>)
 8000416:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800041a:	6213      	str	r3, [r2, #32]

	GPIOA->AFR[0]|=(1U<<28);
 800041c:	4b0f      	ldr	r3, [pc, #60]	; (800045c <spi_gpio_init+0x110>)
 800041e:	6a1b      	ldr	r3, [r3, #32]
 8000420:	4a0e      	ldr	r2, [pc, #56]	; (800045c <spi_gpio_init+0x110>)
 8000422:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000426:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]&=~(1U<<29);
 8000428:	4b0c      	ldr	r3, [pc, #48]	; (800045c <spi_gpio_init+0x110>)
 800042a:	6a1b      	ldr	r3, [r3, #32]
 800042c:	4a0b      	ldr	r2, [pc, #44]	; (800045c <spi_gpio_init+0x110>)
 800042e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8000432:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|=(1U<<30);
 8000434:	4b09      	ldr	r3, [pc, #36]	; (800045c <spi_gpio_init+0x110>)
 8000436:	6a1b      	ldr	r3, [r3, #32]
 8000438:	4a08      	ldr	r2, [pc, #32]	; (800045c <spi_gpio_init+0x110>)
 800043a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800043e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]&=~(1U<<31);
 8000440:	4b06      	ldr	r3, [pc, #24]	; (800045c <spi_gpio_init+0x110>)
 8000442:	6a1b      	ldr	r3, [r3, #32]
 8000444:	4a05      	ldr	r2, [pc, #20]	; (800045c <spi_gpio_init+0x110>)
 8000446:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800044a:	6213      	str	r3, [r2, #32]


}
 800044c:	bf00      	nop
 800044e:	46bd      	mov	sp, r7
 8000450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000454:	4770      	bx	lr
 8000456:	bf00      	nop
 8000458:	40023800 	.word	0x40023800
 800045c:	40020000 	.word	0x40020000

08000460 <spi1_config>:

void spi1_config(void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0
	/*enable clock access to spi1*/
	RCC->AHB2ENR |=SPI1EN;
 8000464:	4b26      	ldr	r3, [pc, #152]	; (8000500 <spi1_config+0xa0>)
 8000466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000468:	4a25      	ldr	r2, [pc, #148]	; (8000500 <spi1_config+0xa0>)
 800046a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800046e:	6353      	str	r3, [r2, #52]	; 0x34

	/*clock speed to periphclk/4 in baud rate register*/
	SPI1->CR1 |=CR1_BR;
 8000470:	4b24      	ldr	r3, [pc, #144]	; (8000504 <spi1_config+0xa4>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	4a23      	ldr	r2, [pc, #140]	; (8000504 <spi1_config+0xa4>)
 8000476:	f043 0308 	orr.w	r3, r3, #8
 800047a:	6013      	str	r3, [r2, #0]
	SPI1->CR1 &=~(1U<<4);
 800047c:	4b21      	ldr	r3, [pc, #132]	; (8000504 <spi1_config+0xa4>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	4a20      	ldr	r2, [pc, #128]	; (8000504 <spi1_config+0xa4>)
 8000482:	f023 0310 	bic.w	r3, r3, #16
 8000486:	6013      	str	r3, [r2, #0]
	SPI1->CR1 &=~(1U<<5);
 8000488:	4b1e      	ldr	r3, [pc, #120]	; (8000504 <spi1_config+0xa4>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	4a1d      	ldr	r2, [pc, #116]	; (8000504 <spi1_config+0xa4>)
 800048e:	f023 0320 	bic.w	r3, r3, #32
 8000492:	6013      	str	r3, [r2, #0]

	/*set CPOL and CPHA to 1*/
	SPI1->CR1 |=CR1_CPHA;
 8000494:	4b1b      	ldr	r3, [pc, #108]	; (8000504 <spi1_config+0xa4>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	4a1a      	ldr	r2, [pc, #104]	; (8000504 <spi1_config+0xa4>)
 800049a:	f043 0301 	orr.w	r3, r3, #1
 800049e:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |=CR1_CPOL;
 80004a0:	4b18      	ldr	r3, [pc, #96]	; (8000504 <spi1_config+0xa4>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4a17      	ldr	r2, [pc, #92]	; (8000504 <spi1_config+0xa4>)
 80004a6:	f043 0302 	orr.w	r3, r3, #2
 80004aa:	6013      	str	r3, [r2, #0]

	/*enable full Duplex*/
	SPI1->CR1 &=~(CR1_RXONLY);
 80004ac:	4b15      	ldr	r3, [pc, #84]	; (8000504 <spi1_config+0xa4>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	4a14      	ldr	r2, [pc, #80]	; (8000504 <spi1_config+0xa4>)
 80004b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80004b6:	6013      	str	r3, [r2, #0]

	/*enable MSB first*/
	SPI1->CR1 &=~CR1_MSBFIRST;
 80004b8:	4b12      	ldr	r3, [pc, #72]	; (8000504 <spi1_config+0xa4>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	4a11      	ldr	r2, [pc, #68]	; (8000504 <spi1_config+0xa4>)
 80004be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80004c2:	6013      	str	r3, [r2, #0]

	/*set master mode*/
	SPI1->CR1 |=CR1_MSTR;
 80004c4:	4b0f      	ldr	r3, [pc, #60]	; (8000504 <spi1_config+0xa4>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	4a0e      	ldr	r2, [pc, #56]	; (8000504 <spi1_config+0xa4>)
 80004ca:	f043 0304 	orr.w	r3, r3, #4
 80004ce:	6013      	str	r3, [r2, #0]

	/*set data size 8 BIT*/
	SPI1->CR1 &=~CR1_DFF;
 80004d0:	4b0c      	ldr	r3, [pc, #48]	; (8000504 <spi1_config+0xa4>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	4a0b      	ldr	r2, [pc, #44]	; (8000504 <spi1_config+0xa4>)
 80004d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80004da:	6013      	str	r3, [r2, #0]

	/*SET SS1 AND SSM TO 1;NSS is disabled by default*/
	SPI1->CR1|= CR1_SSM;
 80004dc:	4b09      	ldr	r3, [pc, #36]	; (8000504 <spi1_config+0xa4>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a08      	ldr	r2, [pc, #32]	; (8000504 <spi1_config+0xa4>)
 80004e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004e6:	6013      	str	r3, [r2, #0]
	SPI1->CR1|= CR1_SSI;
 80004e8:	4b06      	ldr	r3, [pc, #24]	; (8000504 <spi1_config+0xa4>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a05      	ldr	r2, [pc, #20]	; (8000504 <spi1_config+0xa4>)
 80004ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004f2:	6013      	str	r3, [r2, #0]

}
 80004f4:	bf00      	nop
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	40023800 	.word	0x40023800
 8000504:	40013000 	.word	0x40013000

08000508 <spi1_transmit>:

void spi1_transmit(uint8_t *data,uint32_t size)
{
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
 8000510:	6039      	str	r1, [r7, #0]
	uint32_t i=0;// only used for loop purpose
 8000512:	2300      	movs	r3, #0
 8000514:	60fb      	str	r3, [r7, #12]
	uint8_t temp=0;// This is for clearing flags by reading value
 8000516:	2300      	movs	r3, #0
 8000518:	72fb      	strb	r3, [r7, #11]

	while(i<size)
 800051a:	e00f      	b.n	800053c <spi1_transmit+0x34>
	{
		/*wait until TxE is set*/
		while(!(SR_TXE & SPI1->SR))
 800051c:	bf00      	nop
 800051e:	4b16      	ldr	r3, [pc, #88]	; (8000578 <spi1_transmit+0x70>)
 8000520:	689b      	ldr	r3, [r3, #8]
 8000522:	f003 0302 	and.w	r3, r3, #2
 8000526:	2b00      	cmp	r3, #0
 8000528:	d0f9      	beq.n	800051e <spi1_transmit+0x16>
		{}

		/*write the data to the data register*/
		SPI1->DR=data[i];
 800052a:	687a      	ldr	r2, [r7, #4]
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	4413      	add	r3, r2
 8000530:	781a      	ldrb	r2, [r3, #0]
 8000532:	4b11      	ldr	r3, [pc, #68]	; (8000578 <spi1_transmit+0x70>)
 8000534:	60da      	str	r2, [r3, #12]
		i++;
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	3301      	adds	r3, #1
 800053a:	60fb      	str	r3, [r7, #12]
	while(i<size)
 800053c:	68fa      	ldr	r2, [r7, #12]
 800053e:	683b      	ldr	r3, [r7, #0]
 8000540:	429a      	cmp	r2, r3
 8000542:	d3eb      	bcc.n	800051c <spi1_transmit+0x14>
	}
	/*wait until TxE flag is set*/
	while(!(SR_TXE & SPI1->SR))
 8000544:	bf00      	nop
 8000546:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <spi1_transmit+0x70>)
 8000548:	689b      	ldr	r3, [r3, #8]
 800054a:	f003 0302 	and.w	r3, r3, #2
 800054e:	2b00      	cmp	r3, #0
 8000550:	d0f9      	beq.n	8000546 <spi1_transmit+0x3e>
	{}

	/*wait for the busy flag to reset*/
	while(SPI1->SR &SR_BSY)
 8000552:	bf00      	nop
 8000554:	4b08      	ldr	r3, [pc, #32]	; (8000578 <spi1_transmit+0x70>)
 8000556:	689b      	ldr	r3, [r3, #8]
 8000558:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800055c:	2b00      	cmp	r3, #0
 800055e:	d1f9      	bne.n	8000554 <spi1_transmit+0x4c>
	{
	}

	/*clear over run flag by reading data from both status and data register*/
	temp=SPI1->DR;
 8000560:	4b05      	ldr	r3, [pc, #20]	; (8000578 <spi1_transmit+0x70>)
 8000562:	68db      	ldr	r3, [r3, #12]
 8000564:	72fb      	strb	r3, [r7, #11]
	temp=SPI1->SR;
 8000566:	4b04      	ldr	r3, [pc, #16]	; (8000578 <spi1_transmit+0x70>)
 8000568:	689b      	ldr	r3, [r3, #8]
 800056a:	72fb      	strb	r3, [r7, #11]

}
 800056c:	bf00      	nop
 800056e:	3714      	adds	r7, #20
 8000570:	46bd      	mov	sp, r7
 8000572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000576:	4770      	bx	lr
 8000578:	40013000 	.word	0x40013000

0800057c <spi1_receive>:

 void spi1_receive(uint8_t *data,uint32_t size)
 {
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
 8000584:	6039      	str	r1, [r7, #0]
	 while(size)
 8000586:	e013      	b.n	80005b0 <spi1_receive+0x34>
	 {
		 /*send dummy data*/
		 SPI1->DR=0;
 8000588:	4b0e      	ldr	r3, [pc, #56]	; (80005c4 <spi1_receive+0x48>)
 800058a:	2200      	movs	r2, #0
 800058c:	60da      	str	r2, [r3, #12]

		 /*wait for RxNE flag to be set*/ // receiver not empty
		 while(!(SPI1->SR & SR_RxNE))
 800058e:	bf00      	nop
 8000590:	4b0c      	ldr	r3, [pc, #48]	; (80005c4 <spi1_receive+0x48>)
 8000592:	689b      	ldr	r3, [r3, #8]
 8000594:	f003 0301 	and.w	r3, r3, #1
 8000598:	2b00      	cmp	r3, #0
 800059a:	d0f9      	beq.n	8000590 <spi1_receive+0x14>
		 {

		 }

		 /*read data from data register*/
		 *data++=SPI1->DR;
 800059c:	4b09      	ldr	r3, [pc, #36]	; (80005c4 <spi1_receive+0x48>)
 800059e:	68d9      	ldr	r1, [r3, #12]
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	1c5a      	adds	r2, r3, #1
 80005a4:	607a      	str	r2, [r7, #4]
 80005a6:	b2ca      	uxtb	r2, r1
 80005a8:	701a      	strb	r2, [r3, #0]


		 --size;
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	3b01      	subs	r3, #1
 80005ae:	603b      	str	r3, [r7, #0]
	 while(size)
 80005b0:	683b      	ldr	r3, [r7, #0]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d1e8      	bne.n	8000588 <spi1_receive+0xc>
	 }
 }
 80005b6:	bf00      	nop
 80005b8:	bf00      	nop
 80005ba:	370c      	adds	r7, #12
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr
 80005c4:	40013000 	.word	0x40013000

080005c8 <cs_enable>:

 void cs_enable(void)
 {
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
	 //set pin 9 to 0 inorder to enable it
	 //or we say pull cs line low in order to enable it
	 GPIOA->ODR &=~(1U<<9);
 80005cc:	4b05      	ldr	r3, [pc, #20]	; (80005e4 <cs_enable+0x1c>)
 80005ce:	695b      	ldr	r3, [r3, #20]
 80005d0:	4a04      	ldr	r2, [pc, #16]	; (80005e4 <cs_enable+0x1c>)
 80005d2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80005d6:	6153      	str	r3, [r2, #20]

 }
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	40020000 	.word	0x40020000

080005e8 <cs_disable>:

void cs_disable(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
	// pull pin9 high to disbale it
	GPIOA->ODR |=(1U<<9);
 80005ec:	4b05      	ldr	r3, [pc, #20]	; (8000604 <cs_disable+0x1c>)
 80005ee:	695b      	ldr	r3, [r3, #20]
 80005f0:	4a04      	ldr	r2, [pc, #16]	; (8000604 <cs_disable+0x1c>)
 80005f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005f6:	6153      	str	r3, [r2, #20]
}
 80005f8:	bf00      	nop
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	40020000 	.word	0x40020000

08000608 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000608:	480d      	ldr	r0, [pc, #52]	; (8000640 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800060a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800060c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000610:	480c      	ldr	r0, [pc, #48]	; (8000644 <LoopForever+0x6>)
  ldr r1, =_edata
 8000612:	490d      	ldr	r1, [pc, #52]	; (8000648 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000614:	4a0d      	ldr	r2, [pc, #52]	; (800064c <LoopForever+0xe>)
  movs r3, #0
 8000616:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000618:	e002      	b.n	8000620 <LoopCopyDataInit>

0800061a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800061a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800061c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800061e:	3304      	adds	r3, #4

08000620 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000620:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000622:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000624:	d3f9      	bcc.n	800061a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000626:	4a0a      	ldr	r2, [pc, #40]	; (8000650 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000628:	4c0a      	ldr	r4, [pc, #40]	; (8000654 <LoopForever+0x16>)
  movs r3, #0
 800062a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800062c:	e001      	b.n	8000632 <LoopFillZerobss>

0800062e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800062e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000630:	3204      	adds	r2, #4

08000632 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000632:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000634:	d3fb      	bcc.n	800062e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000636:	f000 f811 	bl	800065c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800063a:	f7ff fe23 	bl	8000284 <main>

0800063e <LoopForever>:

LoopForever:
  b LoopForever
 800063e:	e7fe      	b.n	800063e <LoopForever>
  ldr   r0, =_estack
 8000640:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000644:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000648:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800064c:	080006c4 	.word	0x080006c4
  ldr r2, =_sbss
 8000650:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000654:	20000038 	.word	0x20000038

08000658 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000658:	e7fe      	b.n	8000658 <ADC_IRQHandler>
	...

0800065c <__libc_init_array>:
 800065c:	b570      	push	{r4, r5, r6, lr}
 800065e:	4d0d      	ldr	r5, [pc, #52]	; (8000694 <__libc_init_array+0x38>)
 8000660:	4c0d      	ldr	r4, [pc, #52]	; (8000698 <__libc_init_array+0x3c>)
 8000662:	1b64      	subs	r4, r4, r5
 8000664:	10a4      	asrs	r4, r4, #2
 8000666:	2600      	movs	r6, #0
 8000668:	42a6      	cmp	r6, r4
 800066a:	d109      	bne.n	8000680 <__libc_init_array+0x24>
 800066c:	4d0b      	ldr	r5, [pc, #44]	; (800069c <__libc_init_array+0x40>)
 800066e:	4c0c      	ldr	r4, [pc, #48]	; (80006a0 <__libc_init_array+0x44>)
 8000670:	f000 f818 	bl	80006a4 <_init>
 8000674:	1b64      	subs	r4, r4, r5
 8000676:	10a4      	asrs	r4, r4, #2
 8000678:	2600      	movs	r6, #0
 800067a:	42a6      	cmp	r6, r4
 800067c:	d105      	bne.n	800068a <__libc_init_array+0x2e>
 800067e:	bd70      	pop	{r4, r5, r6, pc}
 8000680:	f855 3b04 	ldr.w	r3, [r5], #4
 8000684:	4798      	blx	r3
 8000686:	3601      	adds	r6, #1
 8000688:	e7ee      	b.n	8000668 <__libc_init_array+0xc>
 800068a:	f855 3b04 	ldr.w	r3, [r5], #4
 800068e:	4798      	blx	r3
 8000690:	3601      	adds	r6, #1
 8000692:	e7f2      	b.n	800067a <__libc_init_array+0x1e>
 8000694:	080006bc 	.word	0x080006bc
 8000698:	080006bc 	.word	0x080006bc
 800069c:	080006bc 	.word	0x080006bc
 80006a0:	080006c0 	.word	0x080006c0

080006a4 <_init>:
 80006a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006a6:	bf00      	nop
 80006a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006aa:	bc08      	pop	{r3}
 80006ac:	469e      	mov	lr, r3
 80006ae:	4770      	bx	lr

080006b0 <_fini>:
 80006b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006b2:	bf00      	nop
 80006b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006b6:	bc08      	pop	{r3}
 80006b8:	469e      	mov	lr, r3
 80006ba:	4770      	bx	lr
