
17_UART_RXNE_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000338  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004e0  080004e8  000104e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004e0  080004e0  000104e8  2**0
                  CONTENTS
  4 .ARM          00000000  080004e0  080004e0  000104e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004e0  080004e8  000104e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004e0  080004e0  000104e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004e4  080004e4  000104e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000104e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000104e8  2**0
                  CONTENTS
 10 .bss          00000020  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000104e8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00010518  2**0
                  CONTENTS, READONLY
 14 .debug_info   00000be1  00000000  00000000  0001055b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000326  00000000  00000000  0001113c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000000b8  00000000  00000000  00011468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000007e  00000000  00000000  00011520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00018f2b  00000000  00000000  0001159e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00000f26  00000000  00000000  0002a4c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0008c182  00000000  00000000  0002b3ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000001d4  00000000  00000000  000b7574  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004a  00000000  00000000  000b7748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080004c8 	.word	0x080004c8

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	080004c8 	.word	0x080004c8

080001e8 <main>:
#define LED_PIN                      PIN12

char key;

int main(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |=GPIODEN;
 80001ec:	4b0a      	ldr	r3, [pc, #40]	; (8000218 <main+0x30>)
 80001ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001f0:	4a09      	ldr	r2, [pc, #36]	; (8000218 <main+0x30>)
 80001f2:	f043 0308 	orr.w	r3, r3, #8
 80001f6:	6313      	str	r3, [r2, #48]	; 0x30


	GPIOD->MODER |= (1U<<24);
 80001f8:	4b08      	ldr	r3, [pc, #32]	; (800021c <main+0x34>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	4a07      	ldr	r2, [pc, #28]	; (800021c <main+0x34>)
 80001fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000202:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &= ~(1U<<25);
 8000204:	4b05      	ldr	r3, [pc, #20]	; (800021c <main+0x34>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4a04      	ldr	r2, [pc, #16]	; (800021c <main+0x34>)
 800020a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800020e:	6013      	str	r3, [r2, #0]


	uart2_rx_interrupt_init();
 8000210:	f000 f85a 	bl	80002c8 <uart2_rx_interrupt_init>

	while(1)
 8000214:	e7fe      	b.n	8000214 <main+0x2c>
 8000216:	bf00      	nop
 8000218:	40023800 	.word	0x40023800
 800021c:	40020c00 	.word	0x40020c00

08000220 <uart_callback>:

	}

}
static void uart_callback(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	key=uart2_read();
 8000224:	f000 f8c8 	bl	80003b8 <uart2_read>
 8000228:	4603      	mov	r3, r0
 800022a:	461a      	mov	r2, r3
 800022c:	4b0d      	ldr	r3, [pc, #52]	; (8000264 <uart_callback+0x44>)
 800022e:	701a      	strb	r2, [r3, #0]
	if(key=='1')
 8000230:	4b0c      	ldr	r3, [pc, #48]	; (8000264 <uart_callback+0x44>)
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	2b31      	cmp	r3, #49	; 0x31
 8000236:	d106      	bne.n	8000246 <uart_callback+0x26>
	{
		GPIOD->ODR |=LED_PIN ;
 8000238:	4b0b      	ldr	r3, [pc, #44]	; (8000268 <uart_callback+0x48>)
 800023a:	695b      	ldr	r3, [r3, #20]
 800023c:	4a0a      	ldr	r2, [pc, #40]	; (8000268 <uart_callback+0x48>)
 800023e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000242:	6153      	str	r3, [r2, #20]
 8000244:	e005      	b.n	8000252 <uart_callback+0x32>
	}
	else
	{
		GPIOD->ODR &=~LED_PIN;
 8000246:	4b08      	ldr	r3, [pc, #32]	; (8000268 <uart_callback+0x48>)
 8000248:	695b      	ldr	r3, [r3, #20]
 800024a:	4a07      	ldr	r2, [pc, #28]	; (8000268 <uart_callback+0x48>)
 800024c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000250:	6153      	str	r3, [r2, #20]
	}

	//clear the RXNE flag
	USART2->SR &=~(SR_RXNE);
 8000252:	4b06      	ldr	r3, [pc, #24]	; (800026c <uart_callback+0x4c>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	4a05      	ldr	r2, [pc, #20]	; (800026c <uart_callback+0x4c>)
 8000258:	f023 0320 	bic.w	r3, r3, #32
 800025c:	6013      	str	r3, [r2, #0]
}
 800025e:	bf00      	nop
 8000260:	bd80      	pop	{r7, pc}
 8000262:	bf00      	nop
 8000264:	2000001c 	.word	0x2000001c
 8000268:	40020c00 	.word	0x40020c00
 800026c:	40004400 	.word	0x40004400

08000270 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
	/*check if RXNE is set*/
	if(USART2->SR & SR_RXNE)
 8000274:	4b04      	ldr	r3, [pc, #16]	; (8000288 <USART2_IRQHandler+0x18>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	f003 0320 	and.w	r3, r3, #32
 800027c:	2b00      	cmp	r3, #0
 800027e:	d001      	beq.n	8000284 <USART2_IRQHandler+0x14>
	{
		uart_callback();
 8000280:	f7ff ffce 	bl	8000220 <uart_callback>
	}
}
 8000284:	bf00      	nop
 8000286:	bd80      	pop	{r7, pc}
 8000288:	40004400 	.word	0x40004400

0800028c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800028c:	b480      	push	{r7}
 800028e:	b083      	sub	sp, #12
 8000290:	af00      	add	r7, sp, #0
 8000292:	4603      	mov	r3, r0
 8000294:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800029a:	2b00      	cmp	r3, #0
 800029c:	db0b      	blt.n	80002b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800029e:	79fb      	ldrb	r3, [r7, #7]
 80002a0:	f003 021f 	and.w	r2, r3, #31
 80002a4:	4907      	ldr	r1, [pc, #28]	; (80002c4 <__NVIC_EnableIRQ+0x38>)
 80002a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002aa:	095b      	lsrs	r3, r3, #5
 80002ac:	2001      	movs	r0, #1
 80002ae:	fa00 f202 	lsl.w	r2, r0, r2
 80002b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002b6:	bf00      	nop
 80002b8:	370c      	adds	r7, #12
 80002ba:	46bd      	mov	sp, r7
 80002bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	e000e100 	.word	0xe000e100

080002c8 <uart2_rx_interrupt_init>:


}

void uart2_rx_interrupt_init(void)// rx and its interrupt
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
	/*CONFIGURE UART GPIO PIN*/

	/*enable clock access to GPIOA*/
	RCC->AHB1ENR |=GPIOAEN;
 80002cc:	4b36      	ldr	r3, [pc, #216]	; (80003a8 <uart2_rx_interrupt_init+0xe0>)
 80002ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002d0:	4a35      	ldr	r2, [pc, #212]	; (80003a8 <uart2_rx_interrupt_init+0xe0>)
 80002d2:	f043 0301 	orr.w	r3, r3, #1
 80002d6:	6313      	str	r3, [r2, #48]	; 0x30

	/*set PA2 mode to alternate function type*/
	GPIOA->MODER &=~(1U<<4);
 80002d8:	4b34      	ldr	r3, [pc, #208]	; (80003ac <uart2_rx_interrupt_init+0xe4>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	4a33      	ldr	r2, [pc, #204]	; (80003ac <uart2_rx_interrupt_init+0xe4>)
 80002de:	f023 0310 	bic.w	r3, r3, #16
 80002e2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 80002e4:	4b31      	ldr	r3, [pc, #196]	; (80003ac <uart2_rx_interrupt_init+0xe4>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4a30      	ldr	r2, [pc, #192]	; (80003ac <uart2_rx_interrupt_init+0xe4>)
 80002ea:	f043 0320 	orr.w	r3, r3, #32
 80002ee:	6013      	str	r3, [r2, #0]

	/*set PA2 alternate function type to AF07(UART_TX)*/
	GPIOA->AFR[0] |=(1U<<8);
 80002f0:	4b2e      	ldr	r3, [pc, #184]	; (80003ac <uart2_rx_interrupt_init+0xe4>)
 80002f2:	6a1b      	ldr	r3, [r3, #32]
 80002f4:	4a2d      	ldr	r2, [pc, #180]	; (80003ac <uart2_rx_interrupt_init+0xe4>)
 80002f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002fa:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<9);
 80002fc:	4b2b      	ldr	r3, [pc, #172]	; (80003ac <uart2_rx_interrupt_init+0xe4>)
 80002fe:	6a1b      	ldr	r3, [r3, #32]
 8000300:	4a2a      	ldr	r2, [pc, #168]	; (80003ac <uart2_rx_interrupt_init+0xe4>)
 8000302:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000306:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<10);
 8000308:	4b28      	ldr	r3, [pc, #160]	; (80003ac <uart2_rx_interrupt_init+0xe4>)
 800030a:	6a1b      	ldr	r3, [r3, #32]
 800030c:	4a27      	ldr	r2, [pc, #156]	; (80003ac <uart2_rx_interrupt_init+0xe4>)
 800030e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000312:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<11);
 8000314:	4b25      	ldr	r3, [pc, #148]	; (80003ac <uart2_rx_interrupt_init+0xe4>)
 8000316:	6a1b      	ldr	r3, [r3, #32]
 8000318:	4a24      	ldr	r2, [pc, #144]	; (80003ac <uart2_rx_interrupt_init+0xe4>)
 800031a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800031e:	6213      	str	r3, [r2, #32]

	/*set PA3 to alternate function type*/
	GPIOA->MODER &=~(1U<<6);
 8000320:	4b22      	ldr	r3, [pc, #136]	; (80003ac <uart2_rx_interrupt_init+0xe4>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	4a21      	ldr	r2, [pc, #132]	; (80003ac <uart2_rx_interrupt_init+0xe4>)
 8000326:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800032a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<7);
 800032c:	4b1f      	ldr	r3, [pc, #124]	; (80003ac <uart2_rx_interrupt_init+0xe4>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	4a1e      	ldr	r2, [pc, #120]	; (80003ac <uart2_rx_interrupt_init+0xe4>)
 8000332:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000336:	6013      	str	r3, [r2, #0]

	/*set PA3 alternate function type to AF07*/
	GPIOA->AFR[0] |=(1U<<12);
 8000338:	4b1c      	ldr	r3, [pc, #112]	; (80003ac <uart2_rx_interrupt_init+0xe4>)
 800033a:	6a1b      	ldr	r3, [r3, #32]
 800033c:	4a1b      	ldr	r2, [pc, #108]	; (80003ac <uart2_rx_interrupt_init+0xe4>)
 800033e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000342:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<13);
 8000344:	4b19      	ldr	r3, [pc, #100]	; (80003ac <uart2_rx_interrupt_init+0xe4>)
 8000346:	6a1b      	ldr	r3, [r3, #32]
 8000348:	4a18      	ldr	r2, [pc, #96]	; (80003ac <uart2_rx_interrupt_init+0xe4>)
 800034a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800034e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<14);
 8000350:	4b16      	ldr	r3, [pc, #88]	; (80003ac <uart2_rx_interrupt_init+0xe4>)
 8000352:	6a1b      	ldr	r3, [r3, #32]
 8000354:	4a15      	ldr	r2, [pc, #84]	; (80003ac <uart2_rx_interrupt_init+0xe4>)
 8000356:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800035a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<15);
 800035c:	4b13      	ldr	r3, [pc, #76]	; (80003ac <uart2_rx_interrupt_init+0xe4>)
 800035e:	6a1b      	ldr	r3, [r3, #32]
 8000360:	4a12      	ldr	r2, [pc, #72]	; (80003ac <uart2_rx_interrupt_init+0xe4>)
 8000362:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000366:	6213      	str	r3, [r2, #32]


	/*CONFIGURE THE UART module*/
	/*enable clock access to uart2*/
	RCC->APB1ENR |=USART2EN;
 8000368:	4b0f      	ldr	r3, [pc, #60]	; (80003a8 <uart2_rx_interrupt_init+0xe0>)
 800036a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800036c:	4a0e      	ldr	r2, [pc, #56]	; (80003a8 <uart2_rx_interrupt_init+0xe0>)
 800036e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000372:	6413      	str	r3, [r2, #64]	; 0x40

	/*configure baudrate*/
	uart_set_baudrate(USART2,APB1_CLK,UART_BaudRate);
 8000374:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000378:	490d      	ldr	r1, [pc, #52]	; (80003b0 <uart2_rx_interrupt_init+0xe8>)
 800037a:	480e      	ldr	r0, [pc, #56]	; (80003b4 <uart2_rx_interrupt_init+0xec>)
 800037c:	f000 f830 	bl	80003e0 <uart_set_baudrate>


	/*configure transfer direction*/
	USART2->CR1 =(CR1_TE |CR1_RE); // direct putting equal to so that other values are set to their default indicating default mode of action.
 8000380:	4b0c      	ldr	r3, [pc, #48]	; (80003b4 <uart2_rx_interrupt_init+0xec>)
 8000382:	220c      	movs	r2, #12
 8000384:	60da      	str	r2, [r3, #12]

	/*enable uart module*/
	USART2->CR1 |=CR1_UE;
 8000386:	4b0b      	ldr	r3, [pc, #44]	; (80003b4 <uart2_rx_interrupt_init+0xec>)
 8000388:	68db      	ldr	r3, [r3, #12]
 800038a:	4a0a      	ldr	r2, [pc, #40]	; (80003b4 <uart2_rx_interrupt_init+0xec>)
 800038c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000390:	60d3      	str	r3, [r2, #12]

	/*Enable RXNE Interrupt*/
	USART2->CR1 |=CR1_RXNEIE;
 8000392:	4b08      	ldr	r3, [pc, #32]	; (80003b4 <uart2_rx_interrupt_init+0xec>)
 8000394:	68db      	ldr	r3, [r3, #12]
 8000396:	4a07      	ldr	r2, [pc, #28]	; (80003b4 <uart2_rx_interrupt_init+0xec>)
 8000398:	f043 0320 	orr.w	r3, r3, #32
 800039c:	60d3      	str	r3, [r2, #12]

	/*Enable UART2 interrupt in NVIC*/
	NVIC_EnableIRQ(USART2_IRQn);
 800039e:	2026      	movs	r0, #38	; 0x26
 80003a0:	f7ff ff74 	bl	800028c <__NVIC_EnableIRQ>

}
 80003a4:	bf00      	nop
 80003a6:	bd80      	pop	{r7, pc}
 80003a8:	40023800 	.word	0x40023800
 80003ac:	40020000 	.word	0x40020000
 80003b0:	00f42400 	.word	0x00f42400
 80003b4:	40004400 	.word	0x40004400

080003b8 <uart2_read>:


}

char uart2_read(void)
{
 80003b8:	b480      	push	{r7}
 80003ba:	af00      	add	r7, sp, #0
	/*Make sure the receive data register is not empty*/
	while(!(USART2->DR & SR_RXNE))
 80003bc:	bf00      	nop
 80003be:	4b07      	ldr	r3, [pc, #28]	; (80003dc <uart2_read+0x24>)
 80003c0:	685b      	ldr	r3, [r3, #4]
 80003c2:	f003 0320 	and.w	r3, r3, #32
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d0f9      	beq.n	80003be <uart2_read+0x6>
	{
		// delay
	}
	/*read from the data register*/
	return USART2->DR;
 80003ca:	4b04      	ldr	r3, [pc, #16]	; (80003dc <uart2_read+0x24>)
 80003cc:	685b      	ldr	r3, [r3, #4]
 80003ce:	b2db      	uxtb	r3, r3
}
 80003d0:	4618      	mov	r0, r3
 80003d2:	46bd      	mov	sp, r7
 80003d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d8:	4770      	bx	lr
 80003da:	bf00      	nop
 80003dc:	40004400 	.word	0x40004400

080003e0 <uart_set_baudrate>:
	/*Write to transmit data register*/
	USART2->DR=(ch & 0xFF); // this means (ch & 11111111 ) and data register is 8 bits for storage

}
static void uart_set_baudrate(USART_TypeDef * USARTx,uint32_t PeriphClk,uint32_t BaudRate)// we will make this compatible with any uart module
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b084      	sub	sp, #16
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	60f8      	str	r0, [r7, #12]
 80003e8:	60b9      	str	r1, [r7, #8]
 80003ea:	607a      	str	r2, [r7, #4]
	USARTx->BRR=compute_uart_bd(PeriphClk,BaudRate);//since only 16 bits are rw in BRR therefore we set reuturn type of comput_uart_bd to uint16_t;
 80003ec:	6879      	ldr	r1, [r7, #4]
 80003ee:	68b8      	ldr	r0, [r7, #8]
 80003f0:	f000 f808 	bl	8000404 <compute_uart_bd>
 80003f4:	4603      	mov	r3, r0
 80003f6:	461a      	mov	r2, r3
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	609a      	str	r2, [r3, #8]
}
 80003fc:	bf00      	nop
 80003fe:	3710      	adds	r7, #16
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}

08000404 <compute_uart_bd>:
static uint16_t compute_uart_bd(uint32_t PeriphClk,uint32_t BaudRate)
{
 8000404:	b480      	push	{r7}
 8000406:	b083      	sub	sp, #12
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
 800040c:	6039      	str	r1, [r7, #0]
	return ((PeriphClk +(BaudRate/2U))/BaudRate);
 800040e:	683b      	ldr	r3, [r7, #0]
 8000410:	085a      	lsrs	r2, r3, #1
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	441a      	add	r2, r3
 8000416:	683b      	ldr	r3, [r7, #0]
 8000418:	fbb2 f3f3 	udiv	r3, r2, r3
 800041c:	b29b      	uxth	r3, r3
}
 800041e:	4618      	mov	r0, r3
 8000420:	370c      	adds	r7, #12
 8000422:	46bd      	mov	sp, r7
 8000424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000428:	4770      	bx	lr
	...

0800042c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800042c:	480d      	ldr	r0, [pc, #52]	; (8000464 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800042e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000430:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000434:	480c      	ldr	r0, [pc, #48]	; (8000468 <LoopForever+0x6>)
  ldr r1, =_edata
 8000436:	490d      	ldr	r1, [pc, #52]	; (800046c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000438:	4a0d      	ldr	r2, [pc, #52]	; (8000470 <LoopForever+0xe>)
  movs r3, #0
 800043a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800043c:	e002      	b.n	8000444 <LoopCopyDataInit>

0800043e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800043e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000440:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000442:	3304      	adds	r3, #4

08000444 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000444:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000446:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000448:	d3f9      	bcc.n	800043e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800044a:	4a0a      	ldr	r2, [pc, #40]	; (8000474 <LoopForever+0x12>)
  ldr r4, =_ebss
 800044c:	4c0a      	ldr	r4, [pc, #40]	; (8000478 <LoopForever+0x16>)
  movs r3, #0
 800044e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000450:	e001      	b.n	8000456 <LoopFillZerobss>

08000452 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000452:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000454:	3204      	adds	r2, #4

08000456 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000456:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000458:	d3fb      	bcc.n	8000452 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800045a:	f000 f811 	bl	8000480 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800045e:	f7ff fec3 	bl	80001e8 <main>

08000462 <LoopForever>:

LoopForever:
  b LoopForever
 8000462:	e7fe      	b.n	8000462 <LoopForever>
  ldr   r0, =_estack
 8000464:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000468:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800046c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000470:	080004e8 	.word	0x080004e8
  ldr r2, =_sbss
 8000474:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000478:	20000020 	.word	0x20000020

0800047c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800047c:	e7fe      	b.n	800047c <ADC_IRQHandler>
	...

08000480 <__libc_init_array>:
 8000480:	b570      	push	{r4, r5, r6, lr}
 8000482:	4d0d      	ldr	r5, [pc, #52]	; (80004b8 <__libc_init_array+0x38>)
 8000484:	4c0d      	ldr	r4, [pc, #52]	; (80004bc <__libc_init_array+0x3c>)
 8000486:	1b64      	subs	r4, r4, r5
 8000488:	10a4      	asrs	r4, r4, #2
 800048a:	2600      	movs	r6, #0
 800048c:	42a6      	cmp	r6, r4
 800048e:	d109      	bne.n	80004a4 <__libc_init_array+0x24>
 8000490:	4d0b      	ldr	r5, [pc, #44]	; (80004c0 <__libc_init_array+0x40>)
 8000492:	4c0c      	ldr	r4, [pc, #48]	; (80004c4 <__libc_init_array+0x44>)
 8000494:	f000 f818 	bl	80004c8 <_init>
 8000498:	1b64      	subs	r4, r4, r5
 800049a:	10a4      	asrs	r4, r4, #2
 800049c:	2600      	movs	r6, #0
 800049e:	42a6      	cmp	r6, r4
 80004a0:	d105      	bne.n	80004ae <__libc_init_array+0x2e>
 80004a2:	bd70      	pop	{r4, r5, r6, pc}
 80004a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80004a8:	4798      	blx	r3
 80004aa:	3601      	adds	r6, #1
 80004ac:	e7ee      	b.n	800048c <__libc_init_array+0xc>
 80004ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80004b2:	4798      	blx	r3
 80004b4:	3601      	adds	r6, #1
 80004b6:	e7f2      	b.n	800049e <__libc_init_array+0x1e>
 80004b8:	080004e0 	.word	0x080004e0
 80004bc:	080004e0 	.word	0x080004e0
 80004c0:	080004e0 	.word	0x080004e0
 80004c4:	080004e4 	.word	0x080004e4

080004c8 <_init>:
 80004c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ca:	bf00      	nop
 80004cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004ce:	bc08      	pop	{r3}
 80004d0:	469e      	mov	lr, r3
 80004d2:	4770      	bx	lr

080004d4 <_fini>:
 80004d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004d6:	bf00      	nop
 80004d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004da:	bc08      	pop	{r3}
 80004dc:	469e      	mov	lr, r3
 80004de:	4770      	bx	lr
