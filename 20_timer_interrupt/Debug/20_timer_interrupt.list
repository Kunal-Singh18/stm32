
20_timer_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001304  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  080014b4  080014b4  000114b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001500  08001500  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08001500  08001500  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001500  08001500  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001500  08001500  00011500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001504  08001504  00011504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08001508  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          0000016c  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001c8  200001c8  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   000017d9  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000671  00000000  00000000  000218a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000001a0  00000000  00000000  00021f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000011c  00000000  00000000  000220c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000210d  00000000  00000000  000221dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00002258  00000000  00000000  000242e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0008e35e  00000000  00000000  00026541  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000c84  00000000  00000000  000b48a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000048  00000000  00000000  000b5524  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000005c 	.word	0x2000005c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800149c 	.word	0x0800149c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000060 	.word	0x20000060
 80001ec:	0800149c 	.word	0x0800149c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <main>:
#define GPIODEN                    (1U<<3)


static void tim3_callback(void);
int main(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0

	RCC->AHB1ENR |=GPIODEN;
 8000294:	4b0b      	ldr	r3, [pc, #44]	; (80002c4 <main+0x34>)
 8000296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000298:	4a0a      	ldr	r2, [pc, #40]	; (80002c4 <main+0x34>)
 800029a:	f043 0308 	orr.w	r3, r3, #8
 800029e:	6313      	str	r3, [r2, #48]	; 0x30


	GPIOD->MODER |= (1U<<24);
 80002a0:	4b09      	ldr	r3, [pc, #36]	; (80002c8 <main+0x38>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a08      	ldr	r2, [pc, #32]	; (80002c8 <main+0x38>)
 80002a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80002aa:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &= ~(1U<<25);
 80002ac:	4b06      	ldr	r3, [pc, #24]	; (80002c8 <main+0x38>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4a05      	ldr	r2, [pc, #20]	; (80002c8 <main+0x38>)
 80002b2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80002b6:	6013      	str	r3, [r2, #0]

	 uart2_tx_init();
 80002b8:	f000 f918 	bl	80004ec <uart2_tx_init>
	 tim3_1hz_interrupt_init();
 80002bc:	f000 f8e8 	bl	8000490 <tim3_1hz_interrupt_init>

	while(1)
 80002c0:	e7fe      	b.n	80002c0 <main+0x30>
 80002c2:	bf00      	nop
 80002c4:	40023800 	.word	0x40023800
 80002c8:	40020c00 	.word	0x40020c00

080002cc <tim3_callback>:
	}

}

static void tim3_callback(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	printf("one second passed tt \n\r");
 80002d0:	4805      	ldr	r0, [pc, #20]	; (80002e8 <tim3_callback+0x1c>)
 80002d2:	f000 fa6f 	bl	80007b4 <iprintf>
	GPIOD->ODR  ^=LED_PIN;
 80002d6:	4b05      	ldr	r3, [pc, #20]	; (80002ec <tim3_callback+0x20>)
 80002d8:	695b      	ldr	r3, [r3, #20]
 80002da:	4a04      	ldr	r2, [pc, #16]	; (80002ec <tim3_callback+0x20>)
 80002dc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80002e0:	6153      	str	r3, [r2, #20]
}
 80002e2:	bf00      	nop
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	080014b4 	.word	0x080014b4
 80002ec:	40020c00 	.word	0x40020c00

080002f0 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
	/*Clear update interrupt flag*/
	TIM3->SR &=~SR_UIF;
 80002f4:	4b04      	ldr	r3, [pc, #16]	; (8000308 <TIM3_IRQHandler+0x18>)
 80002f6:	691b      	ldr	r3, [r3, #16]
 80002f8:	4a03      	ldr	r2, [pc, #12]	; (8000308 <TIM3_IRQHandler+0x18>)
 80002fa:	f023 0301 	bic.w	r3, r3, #1
 80002fe:	6113      	str	r3, [r2, #16]

	//perform something
	tim3_callback();
 8000300:	f7ff ffe4 	bl	80002cc <tim3_callback>
}
 8000304:	bf00      	nop
 8000306:	bd80      	pop	{r7, pc}
 8000308:	40000400 	.word	0x40000400

0800030c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b086      	sub	sp, #24
 8000310:	af00      	add	r7, sp, #0
 8000312:	60f8      	str	r0, [r7, #12]
 8000314:	60b9      	str	r1, [r7, #8]
 8000316:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000318:	2300      	movs	r3, #0
 800031a:	617b      	str	r3, [r7, #20]
 800031c:	e00a      	b.n	8000334 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800031e:	f3af 8000 	nop.w
 8000322:	4601      	mov	r1, r0
 8000324:	68bb      	ldr	r3, [r7, #8]
 8000326:	1c5a      	adds	r2, r3, #1
 8000328:	60ba      	str	r2, [r7, #8]
 800032a:	b2ca      	uxtb	r2, r1
 800032c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800032e:	697b      	ldr	r3, [r7, #20]
 8000330:	3301      	adds	r3, #1
 8000332:	617b      	str	r3, [r7, #20]
 8000334:	697a      	ldr	r2, [r7, #20]
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	429a      	cmp	r2, r3
 800033a:	dbf0      	blt.n	800031e <_read+0x12>
  }

  return len;
 800033c:	687b      	ldr	r3, [r7, #4]
}
 800033e:	4618      	mov	r0, r3
 8000340:	3718      	adds	r7, #24
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}

08000346 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000346:	b580      	push	{r7, lr}
 8000348:	b086      	sub	sp, #24
 800034a:	af00      	add	r7, sp, #0
 800034c:	60f8      	str	r0, [r7, #12]
 800034e:	60b9      	str	r1, [r7, #8]
 8000350:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000352:	2300      	movs	r3, #0
 8000354:	617b      	str	r3, [r7, #20]
 8000356:	e009      	b.n	800036c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000358:	68bb      	ldr	r3, [r7, #8]
 800035a:	1c5a      	adds	r2, r3, #1
 800035c:	60ba      	str	r2, [r7, #8]
 800035e:	781b      	ldrb	r3, [r3, #0]
 8000360:	4618      	mov	r0, r3
 8000362:	f000 f8b7 	bl	80004d4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000366:	697b      	ldr	r3, [r7, #20]
 8000368:	3301      	adds	r3, #1
 800036a:	617b      	str	r3, [r7, #20]
 800036c:	697a      	ldr	r2, [r7, #20]
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	429a      	cmp	r2, r3
 8000372:	dbf1      	blt.n	8000358 <_write+0x12>
  }
  return len;
 8000374:	687b      	ldr	r3, [r7, #4]
}
 8000376:	4618      	mov	r0, r3
 8000378:	3718      	adds	r7, #24
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}

0800037e <_close>:

int _close(int file)
{
 800037e:	b480      	push	{r7}
 8000380:	b083      	sub	sp, #12
 8000382:	af00      	add	r7, sp, #0
 8000384:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000386:	f04f 33ff 	mov.w	r3, #4294967295
}
 800038a:	4618      	mov	r0, r3
 800038c:	370c      	adds	r7, #12
 800038e:	46bd      	mov	sp, r7
 8000390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000394:	4770      	bx	lr

08000396 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000396:	b480      	push	{r7}
 8000398:	b083      	sub	sp, #12
 800039a:	af00      	add	r7, sp, #0
 800039c:	6078      	str	r0, [r7, #4]
 800039e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80003a0:	683b      	ldr	r3, [r7, #0]
 80003a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80003a6:	605a      	str	r2, [r3, #4]
  return 0;
 80003a8:	2300      	movs	r3, #0
}
 80003aa:	4618      	mov	r0, r3
 80003ac:	370c      	adds	r7, #12
 80003ae:	46bd      	mov	sp, r7
 80003b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b4:	4770      	bx	lr

080003b6 <_isatty>:

int _isatty(int file)
{
 80003b6:	b480      	push	{r7}
 80003b8:	b083      	sub	sp, #12
 80003ba:	af00      	add	r7, sp, #0
 80003bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80003be:	2301      	movs	r3, #1
}
 80003c0:	4618      	mov	r0, r3
 80003c2:	370c      	adds	r7, #12
 80003c4:	46bd      	mov	sp, r7
 80003c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ca:	4770      	bx	lr

080003cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80003cc:	b480      	push	{r7}
 80003ce:	b085      	sub	sp, #20
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	60f8      	str	r0, [r7, #12]
 80003d4:	60b9      	str	r1, [r7, #8]
 80003d6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80003d8:	2300      	movs	r3, #0
}
 80003da:	4618      	mov	r0, r3
 80003dc:	3714      	adds	r7, #20
 80003de:	46bd      	mov	sp, r7
 80003e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e4:	4770      	bx	lr
	...

080003e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b086      	sub	sp, #24
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80003f0:	4a14      	ldr	r2, [pc, #80]	; (8000444 <_sbrk+0x5c>)
 80003f2:	4b15      	ldr	r3, [pc, #84]	; (8000448 <_sbrk+0x60>)
 80003f4:	1ad3      	subs	r3, r2, r3
 80003f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80003f8:	697b      	ldr	r3, [r7, #20]
 80003fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80003fc:	4b13      	ldr	r3, [pc, #76]	; (800044c <_sbrk+0x64>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d102      	bne.n	800040a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000404:	4b11      	ldr	r3, [pc, #68]	; (800044c <_sbrk+0x64>)
 8000406:	4a12      	ldr	r2, [pc, #72]	; (8000450 <_sbrk+0x68>)
 8000408:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800040a:	4b10      	ldr	r3, [pc, #64]	; (800044c <_sbrk+0x64>)
 800040c:	681a      	ldr	r2, [r3, #0]
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	4413      	add	r3, r2
 8000412:	693a      	ldr	r2, [r7, #16]
 8000414:	429a      	cmp	r2, r3
 8000416:	d207      	bcs.n	8000428 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000418:	f000 fa70 	bl	80008fc <__errno>
 800041c:	4603      	mov	r3, r0
 800041e:	220c      	movs	r2, #12
 8000420:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000422:	f04f 33ff 	mov.w	r3, #4294967295
 8000426:	e009      	b.n	800043c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000428:	4b08      	ldr	r3, [pc, #32]	; (800044c <_sbrk+0x64>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800042e:	4b07      	ldr	r3, [pc, #28]	; (800044c <_sbrk+0x64>)
 8000430:	681a      	ldr	r2, [r3, #0]
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	4413      	add	r3, r2
 8000436:	4a05      	ldr	r2, [pc, #20]	; (800044c <_sbrk+0x64>)
 8000438:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800043a:	68fb      	ldr	r3, [r7, #12]
}
 800043c:	4618      	mov	r0, r3
 800043e:	3718      	adds	r7, #24
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}
 8000444:	20020000 	.word	0x20020000
 8000448:	00000400 	.word	0x00000400
 800044c:	20000078 	.word	0x20000078
 8000450:	200001c8 	.word	0x200001c8

08000454 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000454:	b480      	push	{r7}
 8000456:	b083      	sub	sp, #12
 8000458:	af00      	add	r7, sp, #0
 800045a:	4603      	mov	r3, r0
 800045c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800045e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000462:	2b00      	cmp	r3, #0
 8000464:	db0b      	blt.n	800047e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000466:	79fb      	ldrb	r3, [r7, #7]
 8000468:	f003 021f 	and.w	r2, r3, #31
 800046c:	4907      	ldr	r1, [pc, #28]	; (800048c <__NVIC_EnableIRQ+0x38>)
 800046e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000472:	095b      	lsrs	r3, r3, #5
 8000474:	2001      	movs	r0, #1
 8000476:	fa00 f202 	lsl.w	r2, r0, r2
 800047a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800047e:	bf00      	nop
 8000480:	370c      	adds	r7, #12
 8000482:	46bd      	mov	sp, r7
 8000484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000488:	4770      	bx	lr
 800048a:	bf00      	nop
 800048c:	e000e100 	.word	0xe000e100

08000490 <tim3_1hz_interrupt_init>:
	// enable timer
	TIM3->CR1 =CR1_CEN;

}
void tim3_1hz_interrupt_init(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	af00      	add	r7, sp, #0
	//enable clock access
	RCC->APB1ENR = TIM3EN;
 8000494:	4b0d      	ldr	r3, [pc, #52]	; (80004cc <tim3_1hz_interrupt_init+0x3c>)
 8000496:	2202      	movs	r2, #2
 8000498:	641a      	str	r2, [r3, #64]	; 0x40

	// set prescaler value
	TIM3->PSC = 1600 -1;  //   16000000 / 1600 = 10000
 800049a:	4b0d      	ldr	r3, [pc, #52]	; (80004d0 <tim3_1hz_interrupt_init+0x40>)
 800049c:	f240 623f 	movw	r2, #1599	; 0x63f
 80004a0:	629a      	str	r2, [r3, #40]	; 0x28
	// set auto reload value
	TIM3->ARR = 10000 -1; // 10000/10000 = 1;
 80004a2:	4b0b      	ldr	r3, [pc, #44]	; (80004d0 <tim3_1hz_interrupt_init+0x40>)
 80004a4:	f242 720f 	movw	r2, #9999	; 0x270f
 80004a8:	62da      	str	r2, [r3, #44]	; 0x2c
	// clear counter
	TIM3->CNT =0;
 80004aa:	4b09      	ldr	r3, [pc, #36]	; (80004d0 <tim3_1hz_interrupt_init+0x40>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	625a      	str	r2, [r3, #36]	; 0x24
	// enable timer
	TIM3->CR1 =CR1_CEN;
 80004b0:	4b07      	ldr	r3, [pc, #28]	; (80004d0 <tim3_1hz_interrupt_init+0x40>)
 80004b2:	2201      	movs	r2, #1
 80004b4:	601a      	str	r2, [r3, #0]

	//enable timer interrupt
	TIM3->DIER |=DIER_UIE;
 80004b6:	4b06      	ldr	r3, [pc, #24]	; (80004d0 <tim3_1hz_interrupt_init+0x40>)
 80004b8:	68db      	ldr	r3, [r3, #12]
 80004ba:	4a05      	ldr	r2, [pc, #20]	; (80004d0 <tim3_1hz_interrupt_init+0x40>)
 80004bc:	f043 0301 	orr.w	r3, r3, #1
 80004c0:	60d3      	str	r3, [r2, #12]

	//enable timer interrupt in NVIC
	NVIC_EnableIRQ(TIM3_IRQn);
 80004c2:	201d      	movs	r0, #29
 80004c4:	f7ff ffc6 	bl	8000454 <__NVIC_EnableIRQ>

}
 80004c8:	bf00      	nop
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	40023800 	.word	0x40023800
 80004d0:	40000400 	.word	0x40000400

080004d4 <__io_putchar>:
static uint16_t compute_uart_bd(uint32_t PeriphClk,uint32_t BaudRate);
void uart2_write(int ch);


int __io_putchar(int ch)// modifying the runtime function of printf
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 80004dc:	6878      	ldr	r0, [r7, #4]
 80004de:	f000 f851 	bl	8000584 <uart2_write>
	return ch;
 80004e2:	687b      	ldr	r3, [r7, #4]
}
 80004e4:	4618      	mov	r0, r3
 80004e6:	3708      	adds	r7, #8
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}

080004ec <uart2_tx_init>:


}

void uart2_tx_init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
	/*CONFIGURE UART GPIO PIN*/

	/*enable clock access to GPIOA*/
	RCC->AHB1ENR |=GPIOAEN;
 80004f0:	4b20      	ldr	r3, [pc, #128]	; (8000574 <uart2_tx_init+0x88>)
 80004f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f4:	4a1f      	ldr	r2, [pc, #124]	; (8000574 <uart2_tx_init+0x88>)
 80004f6:	f043 0301 	orr.w	r3, r3, #1
 80004fa:	6313      	str	r3, [r2, #48]	; 0x30

	/*set PA2 mode to alternate function type*/
	GPIOA->MODER &=~(1U<<4);
 80004fc:	4b1e      	ldr	r3, [pc, #120]	; (8000578 <uart2_tx_init+0x8c>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a1d      	ldr	r2, [pc, #116]	; (8000578 <uart2_tx_init+0x8c>)
 8000502:	f023 0310 	bic.w	r3, r3, #16
 8000506:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 8000508:	4b1b      	ldr	r3, [pc, #108]	; (8000578 <uart2_tx_init+0x8c>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a1a      	ldr	r2, [pc, #104]	; (8000578 <uart2_tx_init+0x8c>)
 800050e:	f043 0320 	orr.w	r3, r3, #32
 8000512:	6013      	str	r3, [r2, #0]

	/*set PA2 alternate function type to AF07(UART_TX)*/
	GPIOA->AFR[0] |=(1U<<8);
 8000514:	4b18      	ldr	r3, [pc, #96]	; (8000578 <uart2_tx_init+0x8c>)
 8000516:	6a1b      	ldr	r3, [r3, #32]
 8000518:	4a17      	ldr	r2, [pc, #92]	; (8000578 <uart2_tx_init+0x8c>)
 800051a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800051e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<9);
 8000520:	4b15      	ldr	r3, [pc, #84]	; (8000578 <uart2_tx_init+0x8c>)
 8000522:	6a1b      	ldr	r3, [r3, #32]
 8000524:	4a14      	ldr	r2, [pc, #80]	; (8000578 <uart2_tx_init+0x8c>)
 8000526:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800052a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<10);
 800052c:	4b12      	ldr	r3, [pc, #72]	; (8000578 <uart2_tx_init+0x8c>)
 800052e:	6a1b      	ldr	r3, [r3, #32]
 8000530:	4a11      	ldr	r2, [pc, #68]	; (8000578 <uart2_tx_init+0x8c>)
 8000532:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000536:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<11);
 8000538:	4b0f      	ldr	r3, [pc, #60]	; (8000578 <uart2_tx_init+0x8c>)
 800053a:	6a1b      	ldr	r3, [r3, #32]
 800053c:	4a0e      	ldr	r2, [pc, #56]	; (8000578 <uart2_tx_init+0x8c>)
 800053e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000542:	6213      	str	r3, [r2, #32]

	/*CONFIGURE THE UART module*/
	/*enable clock access to uart2*/
	RCC->APB1ENR |=USART2EN;
 8000544:	4b0b      	ldr	r3, [pc, #44]	; (8000574 <uart2_tx_init+0x88>)
 8000546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000548:	4a0a      	ldr	r2, [pc, #40]	; (8000574 <uart2_tx_init+0x88>)
 800054a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800054e:	6413      	str	r3, [r2, #64]	; 0x40

	/*configure baudrate*/
	uart_set_baudrate(USART2,APB1_CLK,UART_BaudRate);
 8000550:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000554:	4909      	ldr	r1, [pc, #36]	; (800057c <uart2_tx_init+0x90>)
 8000556:	480a      	ldr	r0, [pc, #40]	; (8000580 <uart2_tx_init+0x94>)
 8000558:	f000 f82c 	bl	80005b4 <uart_set_baudrate>


	/*configure transfer direction*/
	USART2->CR1 =CR1_TE; // direct putting equal to so that other values are set to their default indicating default mode of action.
 800055c:	4b08      	ldr	r3, [pc, #32]	; (8000580 <uart2_tx_init+0x94>)
 800055e:	2208      	movs	r2, #8
 8000560:	60da      	str	r2, [r3, #12]

	/*enable uart module*/
	USART2->CR1 |=CR1_UE;
 8000562:	4b07      	ldr	r3, [pc, #28]	; (8000580 <uart2_tx_init+0x94>)
 8000564:	68db      	ldr	r3, [r3, #12]
 8000566:	4a06      	ldr	r2, [pc, #24]	; (8000580 <uart2_tx_init+0x94>)
 8000568:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800056c:	60d3      	str	r3, [r2, #12]


}
 800056e:	bf00      	nop
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	40023800 	.word	0x40023800
 8000578:	40020000 	.word	0x40020000
 800057c:	00f42400 	.word	0x00f42400
 8000580:	40004400 	.word	0x40004400

08000584 <uart2_write>:
	}
	/*read from the data register*/
	return USART2->DR;
}
void uart2_write(int ch)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
	/*Make sure the transmit data register is empty*/
	while(!(USART2->SR & SR_TXE))
 800058c:	bf00      	nop
 800058e:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <uart2_write+0x2c>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000596:	2b00      	cmp	r3, #0
 8000598:	d0f9      	beq.n	800058e <uart2_write+0xa>
	{
		// wait until transmit data register is empty we can write to data register
	}

	/*Write to transmit data register*/
	USART2->DR=(ch & 0xFF); // this means (ch & 11111111 ) and data register is 8 bits for storage
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	4a04      	ldr	r2, [pc, #16]	; (80005b0 <uart2_write+0x2c>)
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	6053      	str	r3, [r2, #4]

}
 80005a2:	bf00      	nop
 80005a4:	370c      	adds	r7, #12
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	40004400 	.word	0x40004400

080005b4 <uart_set_baudrate>:
static void uart_set_baudrate(USART_TypeDef * USARTx,uint32_t PeriphClk,uint32_t BaudRate)// we will make this compatible with any uart module
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	607a      	str	r2, [r7, #4]
	USARTx->BRR=compute_uart_bd(PeriphClk,BaudRate);//since only 16 bits are rw in BRR therefore we set reuturn type of comput_uart_bd to uint16_t;
 80005c0:	6879      	ldr	r1, [r7, #4]
 80005c2:	68b8      	ldr	r0, [r7, #8]
 80005c4:	f000 f808 	bl	80005d8 <compute_uart_bd>
 80005c8:	4603      	mov	r3, r0
 80005ca:	461a      	mov	r2, r3
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	609a      	str	r2, [r3, #8]
}
 80005d0:	bf00      	nop
 80005d2:	3710      	adds	r7, #16
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}

080005d8 <compute_uart_bd>:
static uint16_t compute_uart_bd(uint32_t PeriphClk,uint32_t BaudRate)
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
 80005e0:	6039      	str	r1, [r7, #0]
	return ((PeriphClk +(BaudRate/2U))/BaudRate);
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	085a      	lsrs	r2, r3, #1
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	441a      	add	r2, r3
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80005f0:	b29b      	uxth	r3, r3
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
	...

08000600 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000600:	480d      	ldr	r0, [pc, #52]	; (8000638 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000602:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000604:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000608:	480c      	ldr	r0, [pc, #48]	; (800063c <LoopForever+0x6>)
  ldr r1, =_edata
 800060a:	490d      	ldr	r1, [pc, #52]	; (8000640 <LoopForever+0xa>)
  ldr r2, =_sidata
 800060c:	4a0d      	ldr	r2, [pc, #52]	; (8000644 <LoopForever+0xe>)
  movs r3, #0
 800060e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000610:	e002      	b.n	8000618 <LoopCopyDataInit>

08000612 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000612:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000614:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000616:	3304      	adds	r3, #4

08000618 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000618:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800061a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800061c:	d3f9      	bcc.n	8000612 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800061e:	4a0a      	ldr	r2, [pc, #40]	; (8000648 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000620:	4c0a      	ldr	r4, [pc, #40]	; (800064c <LoopForever+0x16>)
  movs r3, #0
 8000622:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000624:	e001      	b.n	800062a <LoopFillZerobss>

08000626 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000626:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000628:	3204      	adds	r2, #4

0800062a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800062a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800062c:	d3fb      	bcc.n	8000626 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800062e:	f000 f96b 	bl	8000908 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000632:	f7ff fe2d 	bl	8000290 <main>

08000636 <LoopForever>:

LoopForever:
  b LoopForever
 8000636:	e7fe      	b.n	8000636 <LoopForever>
  ldr   r0, =_estack
 8000638:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800063c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000640:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000644:	08001508 	.word	0x08001508
  ldr r2, =_sbss
 8000648:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800064c:	200001c8 	.word	0x200001c8

08000650 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000650:	e7fe      	b.n	8000650 <ADC_IRQHandler>
	...

08000654 <std>:
 8000654:	2300      	movs	r3, #0
 8000656:	b510      	push	{r4, lr}
 8000658:	4604      	mov	r4, r0
 800065a:	e9c0 3300 	strd	r3, r3, [r0]
 800065e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000662:	6083      	str	r3, [r0, #8]
 8000664:	8181      	strh	r1, [r0, #12]
 8000666:	6643      	str	r3, [r0, #100]	; 0x64
 8000668:	81c2      	strh	r2, [r0, #14]
 800066a:	6183      	str	r3, [r0, #24]
 800066c:	4619      	mov	r1, r3
 800066e:	2208      	movs	r2, #8
 8000670:	305c      	adds	r0, #92	; 0x5c
 8000672:	f000 f8f4 	bl	800085e <memset>
 8000676:	4b05      	ldr	r3, [pc, #20]	; (800068c <std+0x38>)
 8000678:	6263      	str	r3, [r4, #36]	; 0x24
 800067a:	4b05      	ldr	r3, [pc, #20]	; (8000690 <std+0x3c>)
 800067c:	62a3      	str	r3, [r4, #40]	; 0x28
 800067e:	4b05      	ldr	r3, [pc, #20]	; (8000694 <std+0x40>)
 8000680:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000682:	4b05      	ldr	r3, [pc, #20]	; (8000698 <std+0x44>)
 8000684:	6224      	str	r4, [r4, #32]
 8000686:	6323      	str	r3, [r4, #48]	; 0x30
 8000688:	bd10      	pop	{r4, pc}
 800068a:	bf00      	nop
 800068c:	080007d9 	.word	0x080007d9
 8000690:	080007fb 	.word	0x080007fb
 8000694:	08000833 	.word	0x08000833
 8000698:	08000857 	.word	0x08000857

0800069c <stdio_exit_handler>:
 800069c:	4a02      	ldr	r2, [pc, #8]	; (80006a8 <stdio_exit_handler+0xc>)
 800069e:	4903      	ldr	r1, [pc, #12]	; (80006ac <stdio_exit_handler+0x10>)
 80006a0:	4803      	ldr	r0, [pc, #12]	; (80006b0 <stdio_exit_handler+0x14>)
 80006a2:	f000 b869 	b.w	8000778 <_fwalk_sglue>
 80006a6:	bf00      	nop
 80006a8:	20000000 	.word	0x20000000
 80006ac:	080011f9 	.word	0x080011f9
 80006b0:	2000000c 	.word	0x2000000c

080006b4 <cleanup_stdio>:
 80006b4:	6841      	ldr	r1, [r0, #4]
 80006b6:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <cleanup_stdio+0x34>)
 80006b8:	4299      	cmp	r1, r3
 80006ba:	b510      	push	{r4, lr}
 80006bc:	4604      	mov	r4, r0
 80006be:	d001      	beq.n	80006c4 <cleanup_stdio+0x10>
 80006c0:	f000 fd9a 	bl	80011f8 <_fflush_r>
 80006c4:	68a1      	ldr	r1, [r4, #8]
 80006c6:	4b09      	ldr	r3, [pc, #36]	; (80006ec <cleanup_stdio+0x38>)
 80006c8:	4299      	cmp	r1, r3
 80006ca:	d002      	beq.n	80006d2 <cleanup_stdio+0x1e>
 80006cc:	4620      	mov	r0, r4
 80006ce:	f000 fd93 	bl	80011f8 <_fflush_r>
 80006d2:	68e1      	ldr	r1, [r4, #12]
 80006d4:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <cleanup_stdio+0x3c>)
 80006d6:	4299      	cmp	r1, r3
 80006d8:	d004      	beq.n	80006e4 <cleanup_stdio+0x30>
 80006da:	4620      	mov	r0, r4
 80006dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006e0:	f000 bd8a 	b.w	80011f8 <_fflush_r>
 80006e4:	bd10      	pop	{r4, pc}
 80006e6:	bf00      	nop
 80006e8:	2000007c 	.word	0x2000007c
 80006ec:	200000e4 	.word	0x200000e4
 80006f0:	2000014c 	.word	0x2000014c

080006f4 <global_stdio_init.part.0>:
 80006f4:	b510      	push	{r4, lr}
 80006f6:	4b0b      	ldr	r3, [pc, #44]	; (8000724 <global_stdio_init.part.0+0x30>)
 80006f8:	4c0b      	ldr	r4, [pc, #44]	; (8000728 <global_stdio_init.part.0+0x34>)
 80006fa:	4a0c      	ldr	r2, [pc, #48]	; (800072c <global_stdio_init.part.0+0x38>)
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	4620      	mov	r0, r4
 8000700:	2200      	movs	r2, #0
 8000702:	2104      	movs	r1, #4
 8000704:	f7ff ffa6 	bl	8000654 <std>
 8000708:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800070c:	2201      	movs	r2, #1
 800070e:	2109      	movs	r1, #9
 8000710:	f7ff ffa0 	bl	8000654 <std>
 8000714:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000718:	2202      	movs	r2, #2
 800071a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800071e:	2112      	movs	r1, #18
 8000720:	f7ff bf98 	b.w	8000654 <std>
 8000724:	200001b4 	.word	0x200001b4
 8000728:	2000007c 	.word	0x2000007c
 800072c:	0800069d 	.word	0x0800069d

08000730 <__sfp_lock_acquire>:
 8000730:	4801      	ldr	r0, [pc, #4]	; (8000738 <__sfp_lock_acquire+0x8>)
 8000732:	f000 b90d 	b.w	8000950 <__retarget_lock_acquire_recursive>
 8000736:	bf00      	nop
 8000738:	200001bd 	.word	0x200001bd

0800073c <__sfp_lock_release>:
 800073c:	4801      	ldr	r0, [pc, #4]	; (8000744 <__sfp_lock_release+0x8>)
 800073e:	f000 b908 	b.w	8000952 <__retarget_lock_release_recursive>
 8000742:	bf00      	nop
 8000744:	200001bd 	.word	0x200001bd

08000748 <__sinit>:
 8000748:	b510      	push	{r4, lr}
 800074a:	4604      	mov	r4, r0
 800074c:	f7ff fff0 	bl	8000730 <__sfp_lock_acquire>
 8000750:	6a23      	ldr	r3, [r4, #32]
 8000752:	b11b      	cbz	r3, 800075c <__sinit+0x14>
 8000754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000758:	f7ff bff0 	b.w	800073c <__sfp_lock_release>
 800075c:	4b04      	ldr	r3, [pc, #16]	; (8000770 <__sinit+0x28>)
 800075e:	6223      	str	r3, [r4, #32]
 8000760:	4b04      	ldr	r3, [pc, #16]	; (8000774 <__sinit+0x2c>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d1f5      	bne.n	8000754 <__sinit+0xc>
 8000768:	f7ff ffc4 	bl	80006f4 <global_stdio_init.part.0>
 800076c:	e7f2      	b.n	8000754 <__sinit+0xc>
 800076e:	bf00      	nop
 8000770:	080006b5 	.word	0x080006b5
 8000774:	200001b4 	.word	0x200001b4

08000778 <_fwalk_sglue>:
 8000778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800077c:	4607      	mov	r7, r0
 800077e:	4688      	mov	r8, r1
 8000780:	4614      	mov	r4, r2
 8000782:	2600      	movs	r6, #0
 8000784:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000788:	f1b9 0901 	subs.w	r9, r9, #1
 800078c:	d505      	bpl.n	800079a <_fwalk_sglue+0x22>
 800078e:	6824      	ldr	r4, [r4, #0]
 8000790:	2c00      	cmp	r4, #0
 8000792:	d1f7      	bne.n	8000784 <_fwalk_sglue+0xc>
 8000794:	4630      	mov	r0, r6
 8000796:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800079a:	89ab      	ldrh	r3, [r5, #12]
 800079c:	2b01      	cmp	r3, #1
 800079e:	d907      	bls.n	80007b0 <_fwalk_sglue+0x38>
 80007a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80007a4:	3301      	adds	r3, #1
 80007a6:	d003      	beq.n	80007b0 <_fwalk_sglue+0x38>
 80007a8:	4629      	mov	r1, r5
 80007aa:	4638      	mov	r0, r7
 80007ac:	47c0      	blx	r8
 80007ae:	4306      	orrs	r6, r0
 80007b0:	3568      	adds	r5, #104	; 0x68
 80007b2:	e7e9      	b.n	8000788 <_fwalk_sglue+0x10>

080007b4 <iprintf>:
 80007b4:	b40f      	push	{r0, r1, r2, r3}
 80007b6:	b507      	push	{r0, r1, r2, lr}
 80007b8:	4906      	ldr	r1, [pc, #24]	; (80007d4 <iprintf+0x20>)
 80007ba:	ab04      	add	r3, sp, #16
 80007bc:	6808      	ldr	r0, [r1, #0]
 80007be:	f853 2b04 	ldr.w	r2, [r3], #4
 80007c2:	6881      	ldr	r1, [r0, #8]
 80007c4:	9301      	str	r3, [sp, #4]
 80007c6:	f000 f9e7 	bl	8000b98 <_vfiprintf_r>
 80007ca:	b003      	add	sp, #12
 80007cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80007d0:	b004      	add	sp, #16
 80007d2:	4770      	bx	lr
 80007d4:	20000058 	.word	0x20000058

080007d8 <__sread>:
 80007d8:	b510      	push	{r4, lr}
 80007da:	460c      	mov	r4, r1
 80007dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80007e0:	f000 f868 	bl	80008b4 <_read_r>
 80007e4:	2800      	cmp	r0, #0
 80007e6:	bfab      	itete	ge
 80007e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80007ea:	89a3      	ldrhlt	r3, [r4, #12]
 80007ec:	181b      	addge	r3, r3, r0
 80007ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80007f2:	bfac      	ite	ge
 80007f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80007f6:	81a3      	strhlt	r3, [r4, #12]
 80007f8:	bd10      	pop	{r4, pc}

080007fa <__swrite>:
 80007fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80007fe:	461f      	mov	r7, r3
 8000800:	898b      	ldrh	r3, [r1, #12]
 8000802:	05db      	lsls	r3, r3, #23
 8000804:	4605      	mov	r5, r0
 8000806:	460c      	mov	r4, r1
 8000808:	4616      	mov	r6, r2
 800080a:	d505      	bpl.n	8000818 <__swrite+0x1e>
 800080c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000810:	2302      	movs	r3, #2
 8000812:	2200      	movs	r2, #0
 8000814:	f000 f83c 	bl	8000890 <_lseek_r>
 8000818:	89a3      	ldrh	r3, [r4, #12]
 800081a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800081e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000822:	81a3      	strh	r3, [r4, #12]
 8000824:	4632      	mov	r2, r6
 8000826:	463b      	mov	r3, r7
 8000828:	4628      	mov	r0, r5
 800082a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800082e:	f000 b853 	b.w	80008d8 <_write_r>

08000832 <__sseek>:
 8000832:	b510      	push	{r4, lr}
 8000834:	460c      	mov	r4, r1
 8000836:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800083a:	f000 f829 	bl	8000890 <_lseek_r>
 800083e:	1c43      	adds	r3, r0, #1
 8000840:	89a3      	ldrh	r3, [r4, #12]
 8000842:	bf15      	itete	ne
 8000844:	6560      	strne	r0, [r4, #84]	; 0x54
 8000846:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800084a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800084e:	81a3      	strheq	r3, [r4, #12]
 8000850:	bf18      	it	ne
 8000852:	81a3      	strhne	r3, [r4, #12]
 8000854:	bd10      	pop	{r4, pc}

08000856 <__sclose>:
 8000856:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800085a:	f000 b809 	b.w	8000870 <_close_r>

0800085e <memset>:
 800085e:	4402      	add	r2, r0
 8000860:	4603      	mov	r3, r0
 8000862:	4293      	cmp	r3, r2
 8000864:	d100      	bne.n	8000868 <memset+0xa>
 8000866:	4770      	bx	lr
 8000868:	f803 1b01 	strb.w	r1, [r3], #1
 800086c:	e7f9      	b.n	8000862 <memset+0x4>
	...

08000870 <_close_r>:
 8000870:	b538      	push	{r3, r4, r5, lr}
 8000872:	4d06      	ldr	r5, [pc, #24]	; (800088c <_close_r+0x1c>)
 8000874:	2300      	movs	r3, #0
 8000876:	4604      	mov	r4, r0
 8000878:	4608      	mov	r0, r1
 800087a:	602b      	str	r3, [r5, #0]
 800087c:	f7ff fd7f 	bl	800037e <_close>
 8000880:	1c43      	adds	r3, r0, #1
 8000882:	d102      	bne.n	800088a <_close_r+0x1a>
 8000884:	682b      	ldr	r3, [r5, #0]
 8000886:	b103      	cbz	r3, 800088a <_close_r+0x1a>
 8000888:	6023      	str	r3, [r4, #0]
 800088a:	bd38      	pop	{r3, r4, r5, pc}
 800088c:	200001b8 	.word	0x200001b8

08000890 <_lseek_r>:
 8000890:	b538      	push	{r3, r4, r5, lr}
 8000892:	4d07      	ldr	r5, [pc, #28]	; (80008b0 <_lseek_r+0x20>)
 8000894:	4604      	mov	r4, r0
 8000896:	4608      	mov	r0, r1
 8000898:	4611      	mov	r1, r2
 800089a:	2200      	movs	r2, #0
 800089c:	602a      	str	r2, [r5, #0]
 800089e:	461a      	mov	r2, r3
 80008a0:	f7ff fd94 	bl	80003cc <_lseek>
 80008a4:	1c43      	adds	r3, r0, #1
 80008a6:	d102      	bne.n	80008ae <_lseek_r+0x1e>
 80008a8:	682b      	ldr	r3, [r5, #0]
 80008aa:	b103      	cbz	r3, 80008ae <_lseek_r+0x1e>
 80008ac:	6023      	str	r3, [r4, #0]
 80008ae:	bd38      	pop	{r3, r4, r5, pc}
 80008b0:	200001b8 	.word	0x200001b8

080008b4 <_read_r>:
 80008b4:	b538      	push	{r3, r4, r5, lr}
 80008b6:	4d07      	ldr	r5, [pc, #28]	; (80008d4 <_read_r+0x20>)
 80008b8:	4604      	mov	r4, r0
 80008ba:	4608      	mov	r0, r1
 80008bc:	4611      	mov	r1, r2
 80008be:	2200      	movs	r2, #0
 80008c0:	602a      	str	r2, [r5, #0]
 80008c2:	461a      	mov	r2, r3
 80008c4:	f7ff fd22 	bl	800030c <_read>
 80008c8:	1c43      	adds	r3, r0, #1
 80008ca:	d102      	bne.n	80008d2 <_read_r+0x1e>
 80008cc:	682b      	ldr	r3, [r5, #0]
 80008ce:	b103      	cbz	r3, 80008d2 <_read_r+0x1e>
 80008d0:	6023      	str	r3, [r4, #0]
 80008d2:	bd38      	pop	{r3, r4, r5, pc}
 80008d4:	200001b8 	.word	0x200001b8

080008d8 <_write_r>:
 80008d8:	b538      	push	{r3, r4, r5, lr}
 80008da:	4d07      	ldr	r5, [pc, #28]	; (80008f8 <_write_r+0x20>)
 80008dc:	4604      	mov	r4, r0
 80008de:	4608      	mov	r0, r1
 80008e0:	4611      	mov	r1, r2
 80008e2:	2200      	movs	r2, #0
 80008e4:	602a      	str	r2, [r5, #0]
 80008e6:	461a      	mov	r2, r3
 80008e8:	f7ff fd2d 	bl	8000346 <_write>
 80008ec:	1c43      	adds	r3, r0, #1
 80008ee:	d102      	bne.n	80008f6 <_write_r+0x1e>
 80008f0:	682b      	ldr	r3, [r5, #0]
 80008f2:	b103      	cbz	r3, 80008f6 <_write_r+0x1e>
 80008f4:	6023      	str	r3, [r4, #0]
 80008f6:	bd38      	pop	{r3, r4, r5, pc}
 80008f8:	200001b8 	.word	0x200001b8

080008fc <__errno>:
 80008fc:	4b01      	ldr	r3, [pc, #4]	; (8000904 <__errno+0x8>)
 80008fe:	6818      	ldr	r0, [r3, #0]
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	20000058 	.word	0x20000058

08000908 <__libc_init_array>:
 8000908:	b570      	push	{r4, r5, r6, lr}
 800090a:	4d0d      	ldr	r5, [pc, #52]	; (8000940 <__libc_init_array+0x38>)
 800090c:	4c0d      	ldr	r4, [pc, #52]	; (8000944 <__libc_init_array+0x3c>)
 800090e:	1b64      	subs	r4, r4, r5
 8000910:	10a4      	asrs	r4, r4, #2
 8000912:	2600      	movs	r6, #0
 8000914:	42a6      	cmp	r6, r4
 8000916:	d109      	bne.n	800092c <__libc_init_array+0x24>
 8000918:	4d0b      	ldr	r5, [pc, #44]	; (8000948 <__libc_init_array+0x40>)
 800091a:	4c0c      	ldr	r4, [pc, #48]	; (800094c <__libc_init_array+0x44>)
 800091c:	f000 fdbe 	bl	800149c <_init>
 8000920:	1b64      	subs	r4, r4, r5
 8000922:	10a4      	asrs	r4, r4, #2
 8000924:	2600      	movs	r6, #0
 8000926:	42a6      	cmp	r6, r4
 8000928:	d105      	bne.n	8000936 <__libc_init_array+0x2e>
 800092a:	bd70      	pop	{r4, r5, r6, pc}
 800092c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000930:	4798      	blx	r3
 8000932:	3601      	adds	r6, #1
 8000934:	e7ee      	b.n	8000914 <__libc_init_array+0xc>
 8000936:	f855 3b04 	ldr.w	r3, [r5], #4
 800093a:	4798      	blx	r3
 800093c:	3601      	adds	r6, #1
 800093e:	e7f2      	b.n	8000926 <__libc_init_array+0x1e>
 8000940:	08001500 	.word	0x08001500
 8000944:	08001500 	.word	0x08001500
 8000948:	08001500 	.word	0x08001500
 800094c:	08001504 	.word	0x08001504

08000950 <__retarget_lock_acquire_recursive>:
 8000950:	4770      	bx	lr

08000952 <__retarget_lock_release_recursive>:
 8000952:	4770      	bx	lr

08000954 <_free_r>:
 8000954:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000956:	2900      	cmp	r1, #0
 8000958:	d044      	beq.n	80009e4 <_free_r+0x90>
 800095a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800095e:	9001      	str	r0, [sp, #4]
 8000960:	2b00      	cmp	r3, #0
 8000962:	f1a1 0404 	sub.w	r4, r1, #4
 8000966:	bfb8      	it	lt
 8000968:	18e4      	addlt	r4, r4, r3
 800096a:	f000 f8df 	bl	8000b2c <__malloc_lock>
 800096e:	4a1e      	ldr	r2, [pc, #120]	; (80009e8 <_free_r+0x94>)
 8000970:	9801      	ldr	r0, [sp, #4]
 8000972:	6813      	ldr	r3, [r2, #0]
 8000974:	b933      	cbnz	r3, 8000984 <_free_r+0x30>
 8000976:	6063      	str	r3, [r4, #4]
 8000978:	6014      	str	r4, [r2, #0]
 800097a:	b003      	add	sp, #12
 800097c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000980:	f000 b8da 	b.w	8000b38 <__malloc_unlock>
 8000984:	42a3      	cmp	r3, r4
 8000986:	d908      	bls.n	800099a <_free_r+0x46>
 8000988:	6825      	ldr	r5, [r4, #0]
 800098a:	1961      	adds	r1, r4, r5
 800098c:	428b      	cmp	r3, r1
 800098e:	bf01      	itttt	eq
 8000990:	6819      	ldreq	r1, [r3, #0]
 8000992:	685b      	ldreq	r3, [r3, #4]
 8000994:	1949      	addeq	r1, r1, r5
 8000996:	6021      	streq	r1, [r4, #0]
 8000998:	e7ed      	b.n	8000976 <_free_r+0x22>
 800099a:	461a      	mov	r2, r3
 800099c:	685b      	ldr	r3, [r3, #4]
 800099e:	b10b      	cbz	r3, 80009a4 <_free_r+0x50>
 80009a0:	42a3      	cmp	r3, r4
 80009a2:	d9fa      	bls.n	800099a <_free_r+0x46>
 80009a4:	6811      	ldr	r1, [r2, #0]
 80009a6:	1855      	adds	r5, r2, r1
 80009a8:	42a5      	cmp	r5, r4
 80009aa:	d10b      	bne.n	80009c4 <_free_r+0x70>
 80009ac:	6824      	ldr	r4, [r4, #0]
 80009ae:	4421      	add	r1, r4
 80009b0:	1854      	adds	r4, r2, r1
 80009b2:	42a3      	cmp	r3, r4
 80009b4:	6011      	str	r1, [r2, #0]
 80009b6:	d1e0      	bne.n	800097a <_free_r+0x26>
 80009b8:	681c      	ldr	r4, [r3, #0]
 80009ba:	685b      	ldr	r3, [r3, #4]
 80009bc:	6053      	str	r3, [r2, #4]
 80009be:	440c      	add	r4, r1
 80009c0:	6014      	str	r4, [r2, #0]
 80009c2:	e7da      	b.n	800097a <_free_r+0x26>
 80009c4:	d902      	bls.n	80009cc <_free_r+0x78>
 80009c6:	230c      	movs	r3, #12
 80009c8:	6003      	str	r3, [r0, #0]
 80009ca:	e7d6      	b.n	800097a <_free_r+0x26>
 80009cc:	6825      	ldr	r5, [r4, #0]
 80009ce:	1961      	adds	r1, r4, r5
 80009d0:	428b      	cmp	r3, r1
 80009d2:	bf04      	itt	eq
 80009d4:	6819      	ldreq	r1, [r3, #0]
 80009d6:	685b      	ldreq	r3, [r3, #4]
 80009d8:	6063      	str	r3, [r4, #4]
 80009da:	bf04      	itt	eq
 80009dc:	1949      	addeq	r1, r1, r5
 80009de:	6021      	streq	r1, [r4, #0]
 80009e0:	6054      	str	r4, [r2, #4]
 80009e2:	e7ca      	b.n	800097a <_free_r+0x26>
 80009e4:	b003      	add	sp, #12
 80009e6:	bd30      	pop	{r4, r5, pc}
 80009e8:	200001c0 	.word	0x200001c0

080009ec <sbrk_aligned>:
 80009ec:	b570      	push	{r4, r5, r6, lr}
 80009ee:	4e0e      	ldr	r6, [pc, #56]	; (8000a28 <sbrk_aligned+0x3c>)
 80009f0:	460c      	mov	r4, r1
 80009f2:	6831      	ldr	r1, [r6, #0]
 80009f4:	4605      	mov	r5, r0
 80009f6:	b911      	cbnz	r1, 80009fe <sbrk_aligned+0x12>
 80009f8:	f000 fcbc 	bl	8001374 <_sbrk_r>
 80009fc:	6030      	str	r0, [r6, #0]
 80009fe:	4621      	mov	r1, r4
 8000a00:	4628      	mov	r0, r5
 8000a02:	f000 fcb7 	bl	8001374 <_sbrk_r>
 8000a06:	1c43      	adds	r3, r0, #1
 8000a08:	d00a      	beq.n	8000a20 <sbrk_aligned+0x34>
 8000a0a:	1cc4      	adds	r4, r0, #3
 8000a0c:	f024 0403 	bic.w	r4, r4, #3
 8000a10:	42a0      	cmp	r0, r4
 8000a12:	d007      	beq.n	8000a24 <sbrk_aligned+0x38>
 8000a14:	1a21      	subs	r1, r4, r0
 8000a16:	4628      	mov	r0, r5
 8000a18:	f000 fcac 	bl	8001374 <_sbrk_r>
 8000a1c:	3001      	adds	r0, #1
 8000a1e:	d101      	bne.n	8000a24 <sbrk_aligned+0x38>
 8000a20:	f04f 34ff 	mov.w	r4, #4294967295
 8000a24:	4620      	mov	r0, r4
 8000a26:	bd70      	pop	{r4, r5, r6, pc}
 8000a28:	200001c4 	.word	0x200001c4

08000a2c <_malloc_r>:
 8000a2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000a30:	1ccd      	adds	r5, r1, #3
 8000a32:	f025 0503 	bic.w	r5, r5, #3
 8000a36:	3508      	adds	r5, #8
 8000a38:	2d0c      	cmp	r5, #12
 8000a3a:	bf38      	it	cc
 8000a3c:	250c      	movcc	r5, #12
 8000a3e:	2d00      	cmp	r5, #0
 8000a40:	4607      	mov	r7, r0
 8000a42:	db01      	blt.n	8000a48 <_malloc_r+0x1c>
 8000a44:	42a9      	cmp	r1, r5
 8000a46:	d905      	bls.n	8000a54 <_malloc_r+0x28>
 8000a48:	230c      	movs	r3, #12
 8000a4a:	603b      	str	r3, [r7, #0]
 8000a4c:	2600      	movs	r6, #0
 8000a4e:	4630      	mov	r0, r6
 8000a50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000a54:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000b28 <_malloc_r+0xfc>
 8000a58:	f000 f868 	bl	8000b2c <__malloc_lock>
 8000a5c:	f8d8 3000 	ldr.w	r3, [r8]
 8000a60:	461c      	mov	r4, r3
 8000a62:	bb5c      	cbnz	r4, 8000abc <_malloc_r+0x90>
 8000a64:	4629      	mov	r1, r5
 8000a66:	4638      	mov	r0, r7
 8000a68:	f7ff ffc0 	bl	80009ec <sbrk_aligned>
 8000a6c:	1c43      	adds	r3, r0, #1
 8000a6e:	4604      	mov	r4, r0
 8000a70:	d155      	bne.n	8000b1e <_malloc_r+0xf2>
 8000a72:	f8d8 4000 	ldr.w	r4, [r8]
 8000a76:	4626      	mov	r6, r4
 8000a78:	2e00      	cmp	r6, #0
 8000a7a:	d145      	bne.n	8000b08 <_malloc_r+0xdc>
 8000a7c:	2c00      	cmp	r4, #0
 8000a7e:	d048      	beq.n	8000b12 <_malloc_r+0xe6>
 8000a80:	6823      	ldr	r3, [r4, #0]
 8000a82:	4631      	mov	r1, r6
 8000a84:	4638      	mov	r0, r7
 8000a86:	eb04 0903 	add.w	r9, r4, r3
 8000a8a:	f000 fc73 	bl	8001374 <_sbrk_r>
 8000a8e:	4581      	cmp	r9, r0
 8000a90:	d13f      	bne.n	8000b12 <_malloc_r+0xe6>
 8000a92:	6821      	ldr	r1, [r4, #0]
 8000a94:	1a6d      	subs	r5, r5, r1
 8000a96:	4629      	mov	r1, r5
 8000a98:	4638      	mov	r0, r7
 8000a9a:	f7ff ffa7 	bl	80009ec <sbrk_aligned>
 8000a9e:	3001      	adds	r0, #1
 8000aa0:	d037      	beq.n	8000b12 <_malloc_r+0xe6>
 8000aa2:	6823      	ldr	r3, [r4, #0]
 8000aa4:	442b      	add	r3, r5
 8000aa6:	6023      	str	r3, [r4, #0]
 8000aa8:	f8d8 3000 	ldr.w	r3, [r8]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d038      	beq.n	8000b22 <_malloc_r+0xf6>
 8000ab0:	685a      	ldr	r2, [r3, #4]
 8000ab2:	42a2      	cmp	r2, r4
 8000ab4:	d12b      	bne.n	8000b0e <_malloc_r+0xe2>
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	e00f      	b.n	8000adc <_malloc_r+0xb0>
 8000abc:	6822      	ldr	r2, [r4, #0]
 8000abe:	1b52      	subs	r2, r2, r5
 8000ac0:	d41f      	bmi.n	8000b02 <_malloc_r+0xd6>
 8000ac2:	2a0b      	cmp	r2, #11
 8000ac4:	d917      	bls.n	8000af6 <_malloc_r+0xca>
 8000ac6:	1961      	adds	r1, r4, r5
 8000ac8:	42a3      	cmp	r3, r4
 8000aca:	6025      	str	r5, [r4, #0]
 8000acc:	bf18      	it	ne
 8000ace:	6059      	strne	r1, [r3, #4]
 8000ad0:	6863      	ldr	r3, [r4, #4]
 8000ad2:	bf08      	it	eq
 8000ad4:	f8c8 1000 	streq.w	r1, [r8]
 8000ad8:	5162      	str	r2, [r4, r5]
 8000ada:	604b      	str	r3, [r1, #4]
 8000adc:	4638      	mov	r0, r7
 8000ade:	f104 060b 	add.w	r6, r4, #11
 8000ae2:	f000 f829 	bl	8000b38 <__malloc_unlock>
 8000ae6:	f026 0607 	bic.w	r6, r6, #7
 8000aea:	1d23      	adds	r3, r4, #4
 8000aec:	1af2      	subs	r2, r6, r3
 8000aee:	d0ae      	beq.n	8000a4e <_malloc_r+0x22>
 8000af0:	1b9b      	subs	r3, r3, r6
 8000af2:	50a3      	str	r3, [r4, r2]
 8000af4:	e7ab      	b.n	8000a4e <_malloc_r+0x22>
 8000af6:	42a3      	cmp	r3, r4
 8000af8:	6862      	ldr	r2, [r4, #4]
 8000afa:	d1dd      	bne.n	8000ab8 <_malloc_r+0x8c>
 8000afc:	f8c8 2000 	str.w	r2, [r8]
 8000b00:	e7ec      	b.n	8000adc <_malloc_r+0xb0>
 8000b02:	4623      	mov	r3, r4
 8000b04:	6864      	ldr	r4, [r4, #4]
 8000b06:	e7ac      	b.n	8000a62 <_malloc_r+0x36>
 8000b08:	4634      	mov	r4, r6
 8000b0a:	6876      	ldr	r6, [r6, #4]
 8000b0c:	e7b4      	b.n	8000a78 <_malloc_r+0x4c>
 8000b0e:	4613      	mov	r3, r2
 8000b10:	e7cc      	b.n	8000aac <_malloc_r+0x80>
 8000b12:	230c      	movs	r3, #12
 8000b14:	603b      	str	r3, [r7, #0]
 8000b16:	4638      	mov	r0, r7
 8000b18:	f000 f80e 	bl	8000b38 <__malloc_unlock>
 8000b1c:	e797      	b.n	8000a4e <_malloc_r+0x22>
 8000b1e:	6025      	str	r5, [r4, #0]
 8000b20:	e7dc      	b.n	8000adc <_malloc_r+0xb0>
 8000b22:	605b      	str	r3, [r3, #4]
 8000b24:	deff      	udf	#255	; 0xff
 8000b26:	bf00      	nop
 8000b28:	200001c0 	.word	0x200001c0

08000b2c <__malloc_lock>:
 8000b2c:	4801      	ldr	r0, [pc, #4]	; (8000b34 <__malloc_lock+0x8>)
 8000b2e:	f7ff bf0f 	b.w	8000950 <__retarget_lock_acquire_recursive>
 8000b32:	bf00      	nop
 8000b34:	200001bc 	.word	0x200001bc

08000b38 <__malloc_unlock>:
 8000b38:	4801      	ldr	r0, [pc, #4]	; (8000b40 <__malloc_unlock+0x8>)
 8000b3a:	f7ff bf0a 	b.w	8000952 <__retarget_lock_release_recursive>
 8000b3e:	bf00      	nop
 8000b40:	200001bc 	.word	0x200001bc

08000b44 <__sfputc_r>:
 8000b44:	6893      	ldr	r3, [r2, #8]
 8000b46:	3b01      	subs	r3, #1
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	b410      	push	{r4}
 8000b4c:	6093      	str	r3, [r2, #8]
 8000b4e:	da08      	bge.n	8000b62 <__sfputc_r+0x1e>
 8000b50:	6994      	ldr	r4, [r2, #24]
 8000b52:	42a3      	cmp	r3, r4
 8000b54:	db01      	blt.n	8000b5a <__sfputc_r+0x16>
 8000b56:	290a      	cmp	r1, #10
 8000b58:	d103      	bne.n	8000b62 <__sfputc_r+0x1e>
 8000b5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000b5e:	f000 bb73 	b.w	8001248 <__swbuf_r>
 8000b62:	6813      	ldr	r3, [r2, #0]
 8000b64:	1c58      	adds	r0, r3, #1
 8000b66:	6010      	str	r0, [r2, #0]
 8000b68:	7019      	strb	r1, [r3, #0]
 8000b6a:	4608      	mov	r0, r1
 8000b6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000b70:	4770      	bx	lr

08000b72 <__sfputs_r>:
 8000b72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b74:	4606      	mov	r6, r0
 8000b76:	460f      	mov	r7, r1
 8000b78:	4614      	mov	r4, r2
 8000b7a:	18d5      	adds	r5, r2, r3
 8000b7c:	42ac      	cmp	r4, r5
 8000b7e:	d101      	bne.n	8000b84 <__sfputs_r+0x12>
 8000b80:	2000      	movs	r0, #0
 8000b82:	e007      	b.n	8000b94 <__sfputs_r+0x22>
 8000b84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b88:	463a      	mov	r2, r7
 8000b8a:	4630      	mov	r0, r6
 8000b8c:	f7ff ffda 	bl	8000b44 <__sfputc_r>
 8000b90:	1c43      	adds	r3, r0, #1
 8000b92:	d1f3      	bne.n	8000b7c <__sfputs_r+0xa>
 8000b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000b98 <_vfiprintf_r>:
 8000b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b9c:	460d      	mov	r5, r1
 8000b9e:	b09d      	sub	sp, #116	; 0x74
 8000ba0:	4614      	mov	r4, r2
 8000ba2:	4698      	mov	r8, r3
 8000ba4:	4606      	mov	r6, r0
 8000ba6:	b118      	cbz	r0, 8000bb0 <_vfiprintf_r+0x18>
 8000ba8:	6a03      	ldr	r3, [r0, #32]
 8000baa:	b90b      	cbnz	r3, 8000bb0 <_vfiprintf_r+0x18>
 8000bac:	f7ff fdcc 	bl	8000748 <__sinit>
 8000bb0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000bb2:	07d9      	lsls	r1, r3, #31
 8000bb4:	d405      	bmi.n	8000bc2 <_vfiprintf_r+0x2a>
 8000bb6:	89ab      	ldrh	r3, [r5, #12]
 8000bb8:	059a      	lsls	r2, r3, #22
 8000bba:	d402      	bmi.n	8000bc2 <_vfiprintf_r+0x2a>
 8000bbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000bbe:	f7ff fec7 	bl	8000950 <__retarget_lock_acquire_recursive>
 8000bc2:	89ab      	ldrh	r3, [r5, #12]
 8000bc4:	071b      	lsls	r3, r3, #28
 8000bc6:	d501      	bpl.n	8000bcc <_vfiprintf_r+0x34>
 8000bc8:	692b      	ldr	r3, [r5, #16]
 8000bca:	b99b      	cbnz	r3, 8000bf4 <_vfiprintf_r+0x5c>
 8000bcc:	4629      	mov	r1, r5
 8000bce:	4630      	mov	r0, r6
 8000bd0:	f000 fb78 	bl	80012c4 <__swsetup_r>
 8000bd4:	b170      	cbz	r0, 8000bf4 <_vfiprintf_r+0x5c>
 8000bd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000bd8:	07dc      	lsls	r4, r3, #31
 8000bda:	d504      	bpl.n	8000be6 <_vfiprintf_r+0x4e>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	b01d      	add	sp, #116	; 0x74
 8000be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000be6:	89ab      	ldrh	r3, [r5, #12]
 8000be8:	0598      	lsls	r0, r3, #22
 8000bea:	d4f7      	bmi.n	8000bdc <_vfiprintf_r+0x44>
 8000bec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000bee:	f7ff feb0 	bl	8000952 <__retarget_lock_release_recursive>
 8000bf2:	e7f3      	b.n	8000bdc <_vfiprintf_r+0x44>
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	9309      	str	r3, [sp, #36]	; 0x24
 8000bf8:	2320      	movs	r3, #32
 8000bfa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000bfe:	f8cd 800c 	str.w	r8, [sp, #12]
 8000c02:	2330      	movs	r3, #48	; 0x30
 8000c04:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8000db8 <_vfiprintf_r+0x220>
 8000c08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000c0c:	f04f 0901 	mov.w	r9, #1
 8000c10:	4623      	mov	r3, r4
 8000c12:	469a      	mov	sl, r3
 8000c14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000c18:	b10a      	cbz	r2, 8000c1e <_vfiprintf_r+0x86>
 8000c1a:	2a25      	cmp	r2, #37	; 0x25
 8000c1c:	d1f9      	bne.n	8000c12 <_vfiprintf_r+0x7a>
 8000c1e:	ebba 0b04 	subs.w	fp, sl, r4
 8000c22:	d00b      	beq.n	8000c3c <_vfiprintf_r+0xa4>
 8000c24:	465b      	mov	r3, fp
 8000c26:	4622      	mov	r2, r4
 8000c28:	4629      	mov	r1, r5
 8000c2a:	4630      	mov	r0, r6
 8000c2c:	f7ff ffa1 	bl	8000b72 <__sfputs_r>
 8000c30:	3001      	adds	r0, #1
 8000c32:	f000 80a9 	beq.w	8000d88 <_vfiprintf_r+0x1f0>
 8000c36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000c38:	445a      	add	r2, fp
 8000c3a:	9209      	str	r2, [sp, #36]	; 0x24
 8000c3c:	f89a 3000 	ldrb.w	r3, [sl]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	f000 80a1 	beq.w	8000d88 <_vfiprintf_r+0x1f0>
 8000c46:	2300      	movs	r3, #0
 8000c48:	f04f 32ff 	mov.w	r2, #4294967295
 8000c4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000c50:	f10a 0a01 	add.w	sl, sl, #1
 8000c54:	9304      	str	r3, [sp, #16]
 8000c56:	9307      	str	r3, [sp, #28]
 8000c58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000c5c:	931a      	str	r3, [sp, #104]	; 0x68
 8000c5e:	4654      	mov	r4, sl
 8000c60:	2205      	movs	r2, #5
 8000c62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c66:	4854      	ldr	r0, [pc, #336]	; (8000db8 <_vfiprintf_r+0x220>)
 8000c68:	f7ff fac2 	bl	80001f0 <memchr>
 8000c6c:	9a04      	ldr	r2, [sp, #16]
 8000c6e:	b9d8      	cbnz	r0, 8000ca8 <_vfiprintf_r+0x110>
 8000c70:	06d1      	lsls	r1, r2, #27
 8000c72:	bf44      	itt	mi
 8000c74:	2320      	movmi	r3, #32
 8000c76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000c7a:	0713      	lsls	r3, r2, #28
 8000c7c:	bf44      	itt	mi
 8000c7e:	232b      	movmi	r3, #43	; 0x2b
 8000c80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000c84:	f89a 3000 	ldrb.w	r3, [sl]
 8000c88:	2b2a      	cmp	r3, #42	; 0x2a
 8000c8a:	d015      	beq.n	8000cb8 <_vfiprintf_r+0x120>
 8000c8c:	9a07      	ldr	r2, [sp, #28]
 8000c8e:	4654      	mov	r4, sl
 8000c90:	2000      	movs	r0, #0
 8000c92:	f04f 0c0a 	mov.w	ip, #10
 8000c96:	4621      	mov	r1, r4
 8000c98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000c9c:	3b30      	subs	r3, #48	; 0x30
 8000c9e:	2b09      	cmp	r3, #9
 8000ca0:	d94d      	bls.n	8000d3e <_vfiprintf_r+0x1a6>
 8000ca2:	b1b0      	cbz	r0, 8000cd2 <_vfiprintf_r+0x13a>
 8000ca4:	9207      	str	r2, [sp, #28]
 8000ca6:	e014      	b.n	8000cd2 <_vfiprintf_r+0x13a>
 8000ca8:	eba0 0308 	sub.w	r3, r0, r8
 8000cac:	fa09 f303 	lsl.w	r3, r9, r3
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	9304      	str	r3, [sp, #16]
 8000cb4:	46a2      	mov	sl, r4
 8000cb6:	e7d2      	b.n	8000c5e <_vfiprintf_r+0xc6>
 8000cb8:	9b03      	ldr	r3, [sp, #12]
 8000cba:	1d19      	adds	r1, r3, #4
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	9103      	str	r1, [sp, #12]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	bfbb      	ittet	lt
 8000cc4:	425b      	neglt	r3, r3
 8000cc6:	f042 0202 	orrlt.w	r2, r2, #2
 8000cca:	9307      	strge	r3, [sp, #28]
 8000ccc:	9307      	strlt	r3, [sp, #28]
 8000cce:	bfb8      	it	lt
 8000cd0:	9204      	strlt	r2, [sp, #16]
 8000cd2:	7823      	ldrb	r3, [r4, #0]
 8000cd4:	2b2e      	cmp	r3, #46	; 0x2e
 8000cd6:	d10c      	bne.n	8000cf2 <_vfiprintf_r+0x15a>
 8000cd8:	7863      	ldrb	r3, [r4, #1]
 8000cda:	2b2a      	cmp	r3, #42	; 0x2a
 8000cdc:	d134      	bne.n	8000d48 <_vfiprintf_r+0x1b0>
 8000cde:	9b03      	ldr	r3, [sp, #12]
 8000ce0:	1d1a      	adds	r2, r3, #4
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	9203      	str	r2, [sp, #12]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	bfb8      	it	lt
 8000cea:	f04f 33ff 	movlt.w	r3, #4294967295
 8000cee:	3402      	adds	r4, #2
 8000cf0:	9305      	str	r3, [sp, #20]
 8000cf2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8000dc8 <_vfiprintf_r+0x230>
 8000cf6:	7821      	ldrb	r1, [r4, #0]
 8000cf8:	2203      	movs	r2, #3
 8000cfa:	4650      	mov	r0, sl
 8000cfc:	f7ff fa78 	bl	80001f0 <memchr>
 8000d00:	b138      	cbz	r0, 8000d12 <_vfiprintf_r+0x17a>
 8000d02:	9b04      	ldr	r3, [sp, #16]
 8000d04:	eba0 000a 	sub.w	r0, r0, sl
 8000d08:	2240      	movs	r2, #64	; 0x40
 8000d0a:	4082      	lsls	r2, r0
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	3401      	adds	r4, #1
 8000d10:	9304      	str	r3, [sp, #16]
 8000d12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d16:	4829      	ldr	r0, [pc, #164]	; (8000dbc <_vfiprintf_r+0x224>)
 8000d18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000d1c:	2206      	movs	r2, #6
 8000d1e:	f7ff fa67 	bl	80001f0 <memchr>
 8000d22:	2800      	cmp	r0, #0
 8000d24:	d03f      	beq.n	8000da6 <_vfiprintf_r+0x20e>
 8000d26:	4b26      	ldr	r3, [pc, #152]	; (8000dc0 <_vfiprintf_r+0x228>)
 8000d28:	bb1b      	cbnz	r3, 8000d72 <_vfiprintf_r+0x1da>
 8000d2a:	9b03      	ldr	r3, [sp, #12]
 8000d2c:	3307      	adds	r3, #7
 8000d2e:	f023 0307 	bic.w	r3, r3, #7
 8000d32:	3308      	adds	r3, #8
 8000d34:	9303      	str	r3, [sp, #12]
 8000d36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000d38:	443b      	add	r3, r7
 8000d3a:	9309      	str	r3, [sp, #36]	; 0x24
 8000d3c:	e768      	b.n	8000c10 <_vfiprintf_r+0x78>
 8000d3e:	fb0c 3202 	mla	r2, ip, r2, r3
 8000d42:	460c      	mov	r4, r1
 8000d44:	2001      	movs	r0, #1
 8000d46:	e7a6      	b.n	8000c96 <_vfiprintf_r+0xfe>
 8000d48:	2300      	movs	r3, #0
 8000d4a:	3401      	adds	r4, #1
 8000d4c:	9305      	str	r3, [sp, #20]
 8000d4e:	4619      	mov	r1, r3
 8000d50:	f04f 0c0a 	mov.w	ip, #10
 8000d54:	4620      	mov	r0, r4
 8000d56:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000d5a:	3a30      	subs	r2, #48	; 0x30
 8000d5c:	2a09      	cmp	r2, #9
 8000d5e:	d903      	bls.n	8000d68 <_vfiprintf_r+0x1d0>
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d0c6      	beq.n	8000cf2 <_vfiprintf_r+0x15a>
 8000d64:	9105      	str	r1, [sp, #20]
 8000d66:	e7c4      	b.n	8000cf2 <_vfiprintf_r+0x15a>
 8000d68:	fb0c 2101 	mla	r1, ip, r1, r2
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	2301      	movs	r3, #1
 8000d70:	e7f0      	b.n	8000d54 <_vfiprintf_r+0x1bc>
 8000d72:	ab03      	add	r3, sp, #12
 8000d74:	9300      	str	r3, [sp, #0]
 8000d76:	462a      	mov	r2, r5
 8000d78:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <_vfiprintf_r+0x22c>)
 8000d7a:	a904      	add	r1, sp, #16
 8000d7c:	4630      	mov	r0, r6
 8000d7e:	f3af 8000 	nop.w
 8000d82:	4607      	mov	r7, r0
 8000d84:	1c78      	adds	r0, r7, #1
 8000d86:	d1d6      	bne.n	8000d36 <_vfiprintf_r+0x19e>
 8000d88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000d8a:	07d9      	lsls	r1, r3, #31
 8000d8c:	d405      	bmi.n	8000d9a <_vfiprintf_r+0x202>
 8000d8e:	89ab      	ldrh	r3, [r5, #12]
 8000d90:	059a      	lsls	r2, r3, #22
 8000d92:	d402      	bmi.n	8000d9a <_vfiprintf_r+0x202>
 8000d94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000d96:	f7ff fddc 	bl	8000952 <__retarget_lock_release_recursive>
 8000d9a:	89ab      	ldrh	r3, [r5, #12]
 8000d9c:	065b      	lsls	r3, r3, #25
 8000d9e:	f53f af1d 	bmi.w	8000bdc <_vfiprintf_r+0x44>
 8000da2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000da4:	e71c      	b.n	8000be0 <_vfiprintf_r+0x48>
 8000da6:	ab03      	add	r3, sp, #12
 8000da8:	9300      	str	r3, [sp, #0]
 8000daa:	462a      	mov	r2, r5
 8000dac:	4b05      	ldr	r3, [pc, #20]	; (8000dc4 <_vfiprintf_r+0x22c>)
 8000dae:	a904      	add	r1, sp, #16
 8000db0:	4630      	mov	r0, r6
 8000db2:	f000 f879 	bl	8000ea8 <_printf_i>
 8000db6:	e7e4      	b.n	8000d82 <_vfiprintf_r+0x1ea>
 8000db8:	080014cc 	.word	0x080014cc
 8000dbc:	080014d6 	.word	0x080014d6
 8000dc0:	00000000 	.word	0x00000000
 8000dc4:	08000b73 	.word	0x08000b73
 8000dc8:	080014d2 	.word	0x080014d2

08000dcc <_printf_common>:
 8000dcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dd0:	4616      	mov	r6, r2
 8000dd2:	4699      	mov	r9, r3
 8000dd4:	688a      	ldr	r2, [r1, #8]
 8000dd6:	690b      	ldr	r3, [r1, #16]
 8000dd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	bfb8      	it	lt
 8000de0:	4613      	movlt	r3, r2
 8000de2:	6033      	str	r3, [r6, #0]
 8000de4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000de8:	4607      	mov	r7, r0
 8000dea:	460c      	mov	r4, r1
 8000dec:	b10a      	cbz	r2, 8000df2 <_printf_common+0x26>
 8000dee:	3301      	adds	r3, #1
 8000df0:	6033      	str	r3, [r6, #0]
 8000df2:	6823      	ldr	r3, [r4, #0]
 8000df4:	0699      	lsls	r1, r3, #26
 8000df6:	bf42      	ittt	mi
 8000df8:	6833      	ldrmi	r3, [r6, #0]
 8000dfa:	3302      	addmi	r3, #2
 8000dfc:	6033      	strmi	r3, [r6, #0]
 8000dfe:	6825      	ldr	r5, [r4, #0]
 8000e00:	f015 0506 	ands.w	r5, r5, #6
 8000e04:	d106      	bne.n	8000e14 <_printf_common+0x48>
 8000e06:	f104 0a19 	add.w	sl, r4, #25
 8000e0a:	68e3      	ldr	r3, [r4, #12]
 8000e0c:	6832      	ldr	r2, [r6, #0]
 8000e0e:	1a9b      	subs	r3, r3, r2
 8000e10:	42ab      	cmp	r3, r5
 8000e12:	dc26      	bgt.n	8000e62 <_printf_common+0x96>
 8000e14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000e18:	1e13      	subs	r3, r2, #0
 8000e1a:	6822      	ldr	r2, [r4, #0]
 8000e1c:	bf18      	it	ne
 8000e1e:	2301      	movne	r3, #1
 8000e20:	0692      	lsls	r2, r2, #26
 8000e22:	d42b      	bmi.n	8000e7c <_printf_common+0xb0>
 8000e24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000e28:	4649      	mov	r1, r9
 8000e2a:	4638      	mov	r0, r7
 8000e2c:	47c0      	blx	r8
 8000e2e:	3001      	adds	r0, #1
 8000e30:	d01e      	beq.n	8000e70 <_printf_common+0xa4>
 8000e32:	6823      	ldr	r3, [r4, #0]
 8000e34:	6922      	ldr	r2, [r4, #16]
 8000e36:	f003 0306 	and.w	r3, r3, #6
 8000e3a:	2b04      	cmp	r3, #4
 8000e3c:	bf02      	ittt	eq
 8000e3e:	68e5      	ldreq	r5, [r4, #12]
 8000e40:	6833      	ldreq	r3, [r6, #0]
 8000e42:	1aed      	subeq	r5, r5, r3
 8000e44:	68a3      	ldr	r3, [r4, #8]
 8000e46:	bf0c      	ite	eq
 8000e48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000e4c:	2500      	movne	r5, #0
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	bfc4      	itt	gt
 8000e52:	1a9b      	subgt	r3, r3, r2
 8000e54:	18ed      	addgt	r5, r5, r3
 8000e56:	2600      	movs	r6, #0
 8000e58:	341a      	adds	r4, #26
 8000e5a:	42b5      	cmp	r5, r6
 8000e5c:	d11a      	bne.n	8000e94 <_printf_common+0xc8>
 8000e5e:	2000      	movs	r0, #0
 8000e60:	e008      	b.n	8000e74 <_printf_common+0xa8>
 8000e62:	2301      	movs	r3, #1
 8000e64:	4652      	mov	r2, sl
 8000e66:	4649      	mov	r1, r9
 8000e68:	4638      	mov	r0, r7
 8000e6a:	47c0      	blx	r8
 8000e6c:	3001      	adds	r0, #1
 8000e6e:	d103      	bne.n	8000e78 <_printf_common+0xac>
 8000e70:	f04f 30ff 	mov.w	r0, #4294967295
 8000e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e78:	3501      	adds	r5, #1
 8000e7a:	e7c6      	b.n	8000e0a <_printf_common+0x3e>
 8000e7c:	18e1      	adds	r1, r4, r3
 8000e7e:	1c5a      	adds	r2, r3, #1
 8000e80:	2030      	movs	r0, #48	; 0x30
 8000e82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000e86:	4422      	add	r2, r4
 8000e88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000e8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000e90:	3302      	adds	r3, #2
 8000e92:	e7c7      	b.n	8000e24 <_printf_common+0x58>
 8000e94:	2301      	movs	r3, #1
 8000e96:	4622      	mov	r2, r4
 8000e98:	4649      	mov	r1, r9
 8000e9a:	4638      	mov	r0, r7
 8000e9c:	47c0      	blx	r8
 8000e9e:	3001      	adds	r0, #1
 8000ea0:	d0e6      	beq.n	8000e70 <_printf_common+0xa4>
 8000ea2:	3601      	adds	r6, #1
 8000ea4:	e7d9      	b.n	8000e5a <_printf_common+0x8e>
	...

08000ea8 <_printf_i>:
 8000ea8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000eac:	7e0f      	ldrb	r7, [r1, #24]
 8000eae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000eb0:	2f78      	cmp	r7, #120	; 0x78
 8000eb2:	4691      	mov	r9, r2
 8000eb4:	4680      	mov	r8, r0
 8000eb6:	460c      	mov	r4, r1
 8000eb8:	469a      	mov	sl, r3
 8000eba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000ebe:	d807      	bhi.n	8000ed0 <_printf_i+0x28>
 8000ec0:	2f62      	cmp	r7, #98	; 0x62
 8000ec2:	d80a      	bhi.n	8000eda <_printf_i+0x32>
 8000ec4:	2f00      	cmp	r7, #0
 8000ec6:	f000 80d4 	beq.w	8001072 <_printf_i+0x1ca>
 8000eca:	2f58      	cmp	r7, #88	; 0x58
 8000ecc:	f000 80c0 	beq.w	8001050 <_printf_i+0x1a8>
 8000ed0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000ed4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000ed8:	e03a      	b.n	8000f50 <_printf_i+0xa8>
 8000eda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000ede:	2b15      	cmp	r3, #21
 8000ee0:	d8f6      	bhi.n	8000ed0 <_printf_i+0x28>
 8000ee2:	a101      	add	r1, pc, #4	; (adr r1, 8000ee8 <_printf_i+0x40>)
 8000ee4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000ee8:	08000f41 	.word	0x08000f41
 8000eec:	08000f55 	.word	0x08000f55
 8000ef0:	08000ed1 	.word	0x08000ed1
 8000ef4:	08000ed1 	.word	0x08000ed1
 8000ef8:	08000ed1 	.word	0x08000ed1
 8000efc:	08000ed1 	.word	0x08000ed1
 8000f00:	08000f55 	.word	0x08000f55
 8000f04:	08000ed1 	.word	0x08000ed1
 8000f08:	08000ed1 	.word	0x08000ed1
 8000f0c:	08000ed1 	.word	0x08000ed1
 8000f10:	08000ed1 	.word	0x08000ed1
 8000f14:	08001059 	.word	0x08001059
 8000f18:	08000f81 	.word	0x08000f81
 8000f1c:	08001013 	.word	0x08001013
 8000f20:	08000ed1 	.word	0x08000ed1
 8000f24:	08000ed1 	.word	0x08000ed1
 8000f28:	0800107b 	.word	0x0800107b
 8000f2c:	08000ed1 	.word	0x08000ed1
 8000f30:	08000f81 	.word	0x08000f81
 8000f34:	08000ed1 	.word	0x08000ed1
 8000f38:	08000ed1 	.word	0x08000ed1
 8000f3c:	0800101b 	.word	0x0800101b
 8000f40:	682b      	ldr	r3, [r5, #0]
 8000f42:	1d1a      	adds	r2, r3, #4
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	602a      	str	r2, [r5, #0]
 8000f48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000f4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000f50:	2301      	movs	r3, #1
 8000f52:	e09f      	b.n	8001094 <_printf_i+0x1ec>
 8000f54:	6820      	ldr	r0, [r4, #0]
 8000f56:	682b      	ldr	r3, [r5, #0]
 8000f58:	0607      	lsls	r7, r0, #24
 8000f5a:	f103 0104 	add.w	r1, r3, #4
 8000f5e:	6029      	str	r1, [r5, #0]
 8000f60:	d501      	bpl.n	8000f66 <_printf_i+0xbe>
 8000f62:	681e      	ldr	r6, [r3, #0]
 8000f64:	e003      	b.n	8000f6e <_printf_i+0xc6>
 8000f66:	0646      	lsls	r6, r0, #25
 8000f68:	d5fb      	bpl.n	8000f62 <_printf_i+0xba>
 8000f6a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8000f6e:	2e00      	cmp	r6, #0
 8000f70:	da03      	bge.n	8000f7a <_printf_i+0xd2>
 8000f72:	232d      	movs	r3, #45	; 0x2d
 8000f74:	4276      	negs	r6, r6
 8000f76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000f7a:	485a      	ldr	r0, [pc, #360]	; (80010e4 <_printf_i+0x23c>)
 8000f7c:	230a      	movs	r3, #10
 8000f7e:	e012      	b.n	8000fa6 <_printf_i+0xfe>
 8000f80:	682b      	ldr	r3, [r5, #0]
 8000f82:	6820      	ldr	r0, [r4, #0]
 8000f84:	1d19      	adds	r1, r3, #4
 8000f86:	6029      	str	r1, [r5, #0]
 8000f88:	0605      	lsls	r5, r0, #24
 8000f8a:	d501      	bpl.n	8000f90 <_printf_i+0xe8>
 8000f8c:	681e      	ldr	r6, [r3, #0]
 8000f8e:	e002      	b.n	8000f96 <_printf_i+0xee>
 8000f90:	0641      	lsls	r1, r0, #25
 8000f92:	d5fb      	bpl.n	8000f8c <_printf_i+0xe4>
 8000f94:	881e      	ldrh	r6, [r3, #0]
 8000f96:	4853      	ldr	r0, [pc, #332]	; (80010e4 <_printf_i+0x23c>)
 8000f98:	2f6f      	cmp	r7, #111	; 0x6f
 8000f9a:	bf0c      	ite	eq
 8000f9c:	2308      	moveq	r3, #8
 8000f9e:	230a      	movne	r3, #10
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000fa6:	6865      	ldr	r5, [r4, #4]
 8000fa8:	60a5      	str	r5, [r4, #8]
 8000faa:	2d00      	cmp	r5, #0
 8000fac:	bfa2      	ittt	ge
 8000fae:	6821      	ldrge	r1, [r4, #0]
 8000fb0:	f021 0104 	bicge.w	r1, r1, #4
 8000fb4:	6021      	strge	r1, [r4, #0]
 8000fb6:	b90e      	cbnz	r6, 8000fbc <_printf_i+0x114>
 8000fb8:	2d00      	cmp	r5, #0
 8000fba:	d04b      	beq.n	8001054 <_printf_i+0x1ac>
 8000fbc:	4615      	mov	r5, r2
 8000fbe:	fbb6 f1f3 	udiv	r1, r6, r3
 8000fc2:	fb03 6711 	mls	r7, r3, r1, r6
 8000fc6:	5dc7      	ldrb	r7, [r0, r7]
 8000fc8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8000fcc:	4637      	mov	r7, r6
 8000fce:	42bb      	cmp	r3, r7
 8000fd0:	460e      	mov	r6, r1
 8000fd2:	d9f4      	bls.n	8000fbe <_printf_i+0x116>
 8000fd4:	2b08      	cmp	r3, #8
 8000fd6:	d10b      	bne.n	8000ff0 <_printf_i+0x148>
 8000fd8:	6823      	ldr	r3, [r4, #0]
 8000fda:	07de      	lsls	r6, r3, #31
 8000fdc:	d508      	bpl.n	8000ff0 <_printf_i+0x148>
 8000fde:	6923      	ldr	r3, [r4, #16]
 8000fe0:	6861      	ldr	r1, [r4, #4]
 8000fe2:	4299      	cmp	r1, r3
 8000fe4:	bfde      	ittt	le
 8000fe6:	2330      	movle	r3, #48	; 0x30
 8000fe8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8000fec:	f105 35ff 	addle.w	r5, r5, #4294967295
 8000ff0:	1b52      	subs	r2, r2, r5
 8000ff2:	6122      	str	r2, [r4, #16]
 8000ff4:	f8cd a000 	str.w	sl, [sp]
 8000ff8:	464b      	mov	r3, r9
 8000ffa:	aa03      	add	r2, sp, #12
 8000ffc:	4621      	mov	r1, r4
 8000ffe:	4640      	mov	r0, r8
 8001000:	f7ff fee4 	bl	8000dcc <_printf_common>
 8001004:	3001      	adds	r0, #1
 8001006:	d14a      	bne.n	800109e <_printf_i+0x1f6>
 8001008:	f04f 30ff 	mov.w	r0, #4294967295
 800100c:	b004      	add	sp, #16
 800100e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001012:	6823      	ldr	r3, [r4, #0]
 8001014:	f043 0320 	orr.w	r3, r3, #32
 8001018:	6023      	str	r3, [r4, #0]
 800101a:	4833      	ldr	r0, [pc, #204]	; (80010e8 <_printf_i+0x240>)
 800101c:	2778      	movs	r7, #120	; 0x78
 800101e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001022:	6823      	ldr	r3, [r4, #0]
 8001024:	6829      	ldr	r1, [r5, #0]
 8001026:	061f      	lsls	r7, r3, #24
 8001028:	f851 6b04 	ldr.w	r6, [r1], #4
 800102c:	d402      	bmi.n	8001034 <_printf_i+0x18c>
 800102e:	065f      	lsls	r7, r3, #25
 8001030:	bf48      	it	mi
 8001032:	b2b6      	uxthmi	r6, r6
 8001034:	07df      	lsls	r7, r3, #31
 8001036:	bf48      	it	mi
 8001038:	f043 0320 	orrmi.w	r3, r3, #32
 800103c:	6029      	str	r1, [r5, #0]
 800103e:	bf48      	it	mi
 8001040:	6023      	strmi	r3, [r4, #0]
 8001042:	b91e      	cbnz	r6, 800104c <_printf_i+0x1a4>
 8001044:	6823      	ldr	r3, [r4, #0]
 8001046:	f023 0320 	bic.w	r3, r3, #32
 800104a:	6023      	str	r3, [r4, #0]
 800104c:	2310      	movs	r3, #16
 800104e:	e7a7      	b.n	8000fa0 <_printf_i+0xf8>
 8001050:	4824      	ldr	r0, [pc, #144]	; (80010e4 <_printf_i+0x23c>)
 8001052:	e7e4      	b.n	800101e <_printf_i+0x176>
 8001054:	4615      	mov	r5, r2
 8001056:	e7bd      	b.n	8000fd4 <_printf_i+0x12c>
 8001058:	682b      	ldr	r3, [r5, #0]
 800105a:	6826      	ldr	r6, [r4, #0]
 800105c:	6961      	ldr	r1, [r4, #20]
 800105e:	1d18      	adds	r0, r3, #4
 8001060:	6028      	str	r0, [r5, #0]
 8001062:	0635      	lsls	r5, r6, #24
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	d501      	bpl.n	800106c <_printf_i+0x1c4>
 8001068:	6019      	str	r1, [r3, #0]
 800106a:	e002      	b.n	8001072 <_printf_i+0x1ca>
 800106c:	0670      	lsls	r0, r6, #25
 800106e:	d5fb      	bpl.n	8001068 <_printf_i+0x1c0>
 8001070:	8019      	strh	r1, [r3, #0]
 8001072:	2300      	movs	r3, #0
 8001074:	6123      	str	r3, [r4, #16]
 8001076:	4615      	mov	r5, r2
 8001078:	e7bc      	b.n	8000ff4 <_printf_i+0x14c>
 800107a:	682b      	ldr	r3, [r5, #0]
 800107c:	1d1a      	adds	r2, r3, #4
 800107e:	602a      	str	r2, [r5, #0]
 8001080:	681d      	ldr	r5, [r3, #0]
 8001082:	6862      	ldr	r2, [r4, #4]
 8001084:	2100      	movs	r1, #0
 8001086:	4628      	mov	r0, r5
 8001088:	f7ff f8b2 	bl	80001f0 <memchr>
 800108c:	b108      	cbz	r0, 8001092 <_printf_i+0x1ea>
 800108e:	1b40      	subs	r0, r0, r5
 8001090:	6060      	str	r0, [r4, #4]
 8001092:	6863      	ldr	r3, [r4, #4]
 8001094:	6123      	str	r3, [r4, #16]
 8001096:	2300      	movs	r3, #0
 8001098:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800109c:	e7aa      	b.n	8000ff4 <_printf_i+0x14c>
 800109e:	6923      	ldr	r3, [r4, #16]
 80010a0:	462a      	mov	r2, r5
 80010a2:	4649      	mov	r1, r9
 80010a4:	4640      	mov	r0, r8
 80010a6:	47d0      	blx	sl
 80010a8:	3001      	adds	r0, #1
 80010aa:	d0ad      	beq.n	8001008 <_printf_i+0x160>
 80010ac:	6823      	ldr	r3, [r4, #0]
 80010ae:	079b      	lsls	r3, r3, #30
 80010b0:	d413      	bmi.n	80010da <_printf_i+0x232>
 80010b2:	68e0      	ldr	r0, [r4, #12]
 80010b4:	9b03      	ldr	r3, [sp, #12]
 80010b6:	4298      	cmp	r0, r3
 80010b8:	bfb8      	it	lt
 80010ba:	4618      	movlt	r0, r3
 80010bc:	e7a6      	b.n	800100c <_printf_i+0x164>
 80010be:	2301      	movs	r3, #1
 80010c0:	4632      	mov	r2, r6
 80010c2:	4649      	mov	r1, r9
 80010c4:	4640      	mov	r0, r8
 80010c6:	47d0      	blx	sl
 80010c8:	3001      	adds	r0, #1
 80010ca:	d09d      	beq.n	8001008 <_printf_i+0x160>
 80010cc:	3501      	adds	r5, #1
 80010ce:	68e3      	ldr	r3, [r4, #12]
 80010d0:	9903      	ldr	r1, [sp, #12]
 80010d2:	1a5b      	subs	r3, r3, r1
 80010d4:	42ab      	cmp	r3, r5
 80010d6:	dcf2      	bgt.n	80010be <_printf_i+0x216>
 80010d8:	e7eb      	b.n	80010b2 <_printf_i+0x20a>
 80010da:	2500      	movs	r5, #0
 80010dc:	f104 0619 	add.w	r6, r4, #25
 80010e0:	e7f5      	b.n	80010ce <_printf_i+0x226>
 80010e2:	bf00      	nop
 80010e4:	080014dd 	.word	0x080014dd
 80010e8:	080014ee 	.word	0x080014ee

080010ec <__sflush_r>:
 80010ec:	898a      	ldrh	r2, [r1, #12]
 80010ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010f2:	4605      	mov	r5, r0
 80010f4:	0710      	lsls	r0, r2, #28
 80010f6:	460c      	mov	r4, r1
 80010f8:	d458      	bmi.n	80011ac <__sflush_r+0xc0>
 80010fa:	684b      	ldr	r3, [r1, #4]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	dc05      	bgt.n	800110c <__sflush_r+0x20>
 8001100:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001102:	2b00      	cmp	r3, #0
 8001104:	dc02      	bgt.n	800110c <__sflush_r+0x20>
 8001106:	2000      	movs	r0, #0
 8001108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800110c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800110e:	2e00      	cmp	r6, #0
 8001110:	d0f9      	beq.n	8001106 <__sflush_r+0x1a>
 8001112:	2300      	movs	r3, #0
 8001114:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001118:	682f      	ldr	r7, [r5, #0]
 800111a:	6a21      	ldr	r1, [r4, #32]
 800111c:	602b      	str	r3, [r5, #0]
 800111e:	d032      	beq.n	8001186 <__sflush_r+0x9a>
 8001120:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001122:	89a3      	ldrh	r3, [r4, #12]
 8001124:	075a      	lsls	r2, r3, #29
 8001126:	d505      	bpl.n	8001134 <__sflush_r+0x48>
 8001128:	6863      	ldr	r3, [r4, #4]
 800112a:	1ac0      	subs	r0, r0, r3
 800112c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800112e:	b10b      	cbz	r3, 8001134 <__sflush_r+0x48>
 8001130:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001132:	1ac0      	subs	r0, r0, r3
 8001134:	2300      	movs	r3, #0
 8001136:	4602      	mov	r2, r0
 8001138:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800113a:	6a21      	ldr	r1, [r4, #32]
 800113c:	4628      	mov	r0, r5
 800113e:	47b0      	blx	r6
 8001140:	1c43      	adds	r3, r0, #1
 8001142:	89a3      	ldrh	r3, [r4, #12]
 8001144:	d106      	bne.n	8001154 <__sflush_r+0x68>
 8001146:	6829      	ldr	r1, [r5, #0]
 8001148:	291d      	cmp	r1, #29
 800114a:	d82b      	bhi.n	80011a4 <__sflush_r+0xb8>
 800114c:	4a29      	ldr	r2, [pc, #164]	; (80011f4 <__sflush_r+0x108>)
 800114e:	410a      	asrs	r2, r1
 8001150:	07d6      	lsls	r6, r2, #31
 8001152:	d427      	bmi.n	80011a4 <__sflush_r+0xb8>
 8001154:	2200      	movs	r2, #0
 8001156:	6062      	str	r2, [r4, #4]
 8001158:	04d9      	lsls	r1, r3, #19
 800115a:	6922      	ldr	r2, [r4, #16]
 800115c:	6022      	str	r2, [r4, #0]
 800115e:	d504      	bpl.n	800116a <__sflush_r+0x7e>
 8001160:	1c42      	adds	r2, r0, #1
 8001162:	d101      	bne.n	8001168 <__sflush_r+0x7c>
 8001164:	682b      	ldr	r3, [r5, #0]
 8001166:	b903      	cbnz	r3, 800116a <__sflush_r+0x7e>
 8001168:	6560      	str	r0, [r4, #84]	; 0x54
 800116a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800116c:	602f      	str	r7, [r5, #0]
 800116e:	2900      	cmp	r1, #0
 8001170:	d0c9      	beq.n	8001106 <__sflush_r+0x1a>
 8001172:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001176:	4299      	cmp	r1, r3
 8001178:	d002      	beq.n	8001180 <__sflush_r+0x94>
 800117a:	4628      	mov	r0, r5
 800117c:	f7ff fbea 	bl	8000954 <_free_r>
 8001180:	2000      	movs	r0, #0
 8001182:	6360      	str	r0, [r4, #52]	; 0x34
 8001184:	e7c0      	b.n	8001108 <__sflush_r+0x1c>
 8001186:	2301      	movs	r3, #1
 8001188:	4628      	mov	r0, r5
 800118a:	47b0      	blx	r6
 800118c:	1c41      	adds	r1, r0, #1
 800118e:	d1c8      	bne.n	8001122 <__sflush_r+0x36>
 8001190:	682b      	ldr	r3, [r5, #0]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d0c5      	beq.n	8001122 <__sflush_r+0x36>
 8001196:	2b1d      	cmp	r3, #29
 8001198:	d001      	beq.n	800119e <__sflush_r+0xb2>
 800119a:	2b16      	cmp	r3, #22
 800119c:	d101      	bne.n	80011a2 <__sflush_r+0xb6>
 800119e:	602f      	str	r7, [r5, #0]
 80011a0:	e7b1      	b.n	8001106 <__sflush_r+0x1a>
 80011a2:	89a3      	ldrh	r3, [r4, #12]
 80011a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011a8:	81a3      	strh	r3, [r4, #12]
 80011aa:	e7ad      	b.n	8001108 <__sflush_r+0x1c>
 80011ac:	690f      	ldr	r7, [r1, #16]
 80011ae:	2f00      	cmp	r7, #0
 80011b0:	d0a9      	beq.n	8001106 <__sflush_r+0x1a>
 80011b2:	0793      	lsls	r3, r2, #30
 80011b4:	680e      	ldr	r6, [r1, #0]
 80011b6:	bf08      	it	eq
 80011b8:	694b      	ldreq	r3, [r1, #20]
 80011ba:	600f      	str	r7, [r1, #0]
 80011bc:	bf18      	it	ne
 80011be:	2300      	movne	r3, #0
 80011c0:	eba6 0807 	sub.w	r8, r6, r7
 80011c4:	608b      	str	r3, [r1, #8]
 80011c6:	f1b8 0f00 	cmp.w	r8, #0
 80011ca:	dd9c      	ble.n	8001106 <__sflush_r+0x1a>
 80011cc:	6a21      	ldr	r1, [r4, #32]
 80011ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80011d0:	4643      	mov	r3, r8
 80011d2:	463a      	mov	r2, r7
 80011d4:	4628      	mov	r0, r5
 80011d6:	47b0      	blx	r6
 80011d8:	2800      	cmp	r0, #0
 80011da:	dc06      	bgt.n	80011ea <__sflush_r+0xfe>
 80011dc:	89a3      	ldrh	r3, [r4, #12]
 80011de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011e2:	81a3      	strh	r3, [r4, #12]
 80011e4:	f04f 30ff 	mov.w	r0, #4294967295
 80011e8:	e78e      	b.n	8001108 <__sflush_r+0x1c>
 80011ea:	4407      	add	r7, r0
 80011ec:	eba8 0800 	sub.w	r8, r8, r0
 80011f0:	e7e9      	b.n	80011c6 <__sflush_r+0xda>
 80011f2:	bf00      	nop
 80011f4:	dfbffffe 	.word	0xdfbffffe

080011f8 <_fflush_r>:
 80011f8:	b538      	push	{r3, r4, r5, lr}
 80011fa:	690b      	ldr	r3, [r1, #16]
 80011fc:	4605      	mov	r5, r0
 80011fe:	460c      	mov	r4, r1
 8001200:	b913      	cbnz	r3, 8001208 <_fflush_r+0x10>
 8001202:	2500      	movs	r5, #0
 8001204:	4628      	mov	r0, r5
 8001206:	bd38      	pop	{r3, r4, r5, pc}
 8001208:	b118      	cbz	r0, 8001212 <_fflush_r+0x1a>
 800120a:	6a03      	ldr	r3, [r0, #32]
 800120c:	b90b      	cbnz	r3, 8001212 <_fflush_r+0x1a>
 800120e:	f7ff fa9b 	bl	8000748 <__sinit>
 8001212:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d0f3      	beq.n	8001202 <_fflush_r+0xa>
 800121a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800121c:	07d0      	lsls	r0, r2, #31
 800121e:	d404      	bmi.n	800122a <_fflush_r+0x32>
 8001220:	0599      	lsls	r1, r3, #22
 8001222:	d402      	bmi.n	800122a <_fflush_r+0x32>
 8001224:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001226:	f7ff fb93 	bl	8000950 <__retarget_lock_acquire_recursive>
 800122a:	4628      	mov	r0, r5
 800122c:	4621      	mov	r1, r4
 800122e:	f7ff ff5d 	bl	80010ec <__sflush_r>
 8001232:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001234:	07da      	lsls	r2, r3, #31
 8001236:	4605      	mov	r5, r0
 8001238:	d4e4      	bmi.n	8001204 <_fflush_r+0xc>
 800123a:	89a3      	ldrh	r3, [r4, #12]
 800123c:	059b      	lsls	r3, r3, #22
 800123e:	d4e1      	bmi.n	8001204 <_fflush_r+0xc>
 8001240:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001242:	f7ff fb86 	bl	8000952 <__retarget_lock_release_recursive>
 8001246:	e7dd      	b.n	8001204 <_fflush_r+0xc>

08001248 <__swbuf_r>:
 8001248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800124a:	460e      	mov	r6, r1
 800124c:	4614      	mov	r4, r2
 800124e:	4605      	mov	r5, r0
 8001250:	b118      	cbz	r0, 800125a <__swbuf_r+0x12>
 8001252:	6a03      	ldr	r3, [r0, #32]
 8001254:	b90b      	cbnz	r3, 800125a <__swbuf_r+0x12>
 8001256:	f7ff fa77 	bl	8000748 <__sinit>
 800125a:	69a3      	ldr	r3, [r4, #24]
 800125c:	60a3      	str	r3, [r4, #8]
 800125e:	89a3      	ldrh	r3, [r4, #12]
 8001260:	071a      	lsls	r2, r3, #28
 8001262:	d525      	bpl.n	80012b0 <__swbuf_r+0x68>
 8001264:	6923      	ldr	r3, [r4, #16]
 8001266:	b31b      	cbz	r3, 80012b0 <__swbuf_r+0x68>
 8001268:	6823      	ldr	r3, [r4, #0]
 800126a:	6922      	ldr	r2, [r4, #16]
 800126c:	1a98      	subs	r0, r3, r2
 800126e:	6963      	ldr	r3, [r4, #20]
 8001270:	b2f6      	uxtb	r6, r6
 8001272:	4283      	cmp	r3, r0
 8001274:	4637      	mov	r7, r6
 8001276:	dc04      	bgt.n	8001282 <__swbuf_r+0x3a>
 8001278:	4621      	mov	r1, r4
 800127a:	4628      	mov	r0, r5
 800127c:	f7ff ffbc 	bl	80011f8 <_fflush_r>
 8001280:	b9e0      	cbnz	r0, 80012bc <__swbuf_r+0x74>
 8001282:	68a3      	ldr	r3, [r4, #8]
 8001284:	3b01      	subs	r3, #1
 8001286:	60a3      	str	r3, [r4, #8]
 8001288:	6823      	ldr	r3, [r4, #0]
 800128a:	1c5a      	adds	r2, r3, #1
 800128c:	6022      	str	r2, [r4, #0]
 800128e:	701e      	strb	r6, [r3, #0]
 8001290:	6962      	ldr	r2, [r4, #20]
 8001292:	1c43      	adds	r3, r0, #1
 8001294:	429a      	cmp	r2, r3
 8001296:	d004      	beq.n	80012a2 <__swbuf_r+0x5a>
 8001298:	89a3      	ldrh	r3, [r4, #12]
 800129a:	07db      	lsls	r3, r3, #31
 800129c:	d506      	bpl.n	80012ac <__swbuf_r+0x64>
 800129e:	2e0a      	cmp	r6, #10
 80012a0:	d104      	bne.n	80012ac <__swbuf_r+0x64>
 80012a2:	4621      	mov	r1, r4
 80012a4:	4628      	mov	r0, r5
 80012a6:	f7ff ffa7 	bl	80011f8 <_fflush_r>
 80012aa:	b938      	cbnz	r0, 80012bc <__swbuf_r+0x74>
 80012ac:	4638      	mov	r0, r7
 80012ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012b0:	4621      	mov	r1, r4
 80012b2:	4628      	mov	r0, r5
 80012b4:	f000 f806 	bl	80012c4 <__swsetup_r>
 80012b8:	2800      	cmp	r0, #0
 80012ba:	d0d5      	beq.n	8001268 <__swbuf_r+0x20>
 80012bc:	f04f 37ff 	mov.w	r7, #4294967295
 80012c0:	e7f4      	b.n	80012ac <__swbuf_r+0x64>
	...

080012c4 <__swsetup_r>:
 80012c4:	b538      	push	{r3, r4, r5, lr}
 80012c6:	4b2a      	ldr	r3, [pc, #168]	; (8001370 <__swsetup_r+0xac>)
 80012c8:	4605      	mov	r5, r0
 80012ca:	6818      	ldr	r0, [r3, #0]
 80012cc:	460c      	mov	r4, r1
 80012ce:	b118      	cbz	r0, 80012d8 <__swsetup_r+0x14>
 80012d0:	6a03      	ldr	r3, [r0, #32]
 80012d2:	b90b      	cbnz	r3, 80012d8 <__swsetup_r+0x14>
 80012d4:	f7ff fa38 	bl	8000748 <__sinit>
 80012d8:	89a3      	ldrh	r3, [r4, #12]
 80012da:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80012de:	0718      	lsls	r0, r3, #28
 80012e0:	d422      	bmi.n	8001328 <__swsetup_r+0x64>
 80012e2:	06d9      	lsls	r1, r3, #27
 80012e4:	d407      	bmi.n	80012f6 <__swsetup_r+0x32>
 80012e6:	2309      	movs	r3, #9
 80012e8:	602b      	str	r3, [r5, #0]
 80012ea:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80012ee:	81a3      	strh	r3, [r4, #12]
 80012f0:	f04f 30ff 	mov.w	r0, #4294967295
 80012f4:	e034      	b.n	8001360 <__swsetup_r+0x9c>
 80012f6:	0758      	lsls	r0, r3, #29
 80012f8:	d512      	bpl.n	8001320 <__swsetup_r+0x5c>
 80012fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80012fc:	b141      	cbz	r1, 8001310 <__swsetup_r+0x4c>
 80012fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001302:	4299      	cmp	r1, r3
 8001304:	d002      	beq.n	800130c <__swsetup_r+0x48>
 8001306:	4628      	mov	r0, r5
 8001308:	f7ff fb24 	bl	8000954 <_free_r>
 800130c:	2300      	movs	r3, #0
 800130e:	6363      	str	r3, [r4, #52]	; 0x34
 8001310:	89a3      	ldrh	r3, [r4, #12]
 8001312:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001316:	81a3      	strh	r3, [r4, #12]
 8001318:	2300      	movs	r3, #0
 800131a:	6063      	str	r3, [r4, #4]
 800131c:	6923      	ldr	r3, [r4, #16]
 800131e:	6023      	str	r3, [r4, #0]
 8001320:	89a3      	ldrh	r3, [r4, #12]
 8001322:	f043 0308 	orr.w	r3, r3, #8
 8001326:	81a3      	strh	r3, [r4, #12]
 8001328:	6923      	ldr	r3, [r4, #16]
 800132a:	b94b      	cbnz	r3, 8001340 <__swsetup_r+0x7c>
 800132c:	89a3      	ldrh	r3, [r4, #12]
 800132e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001332:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001336:	d003      	beq.n	8001340 <__swsetup_r+0x7c>
 8001338:	4621      	mov	r1, r4
 800133a:	4628      	mov	r0, r5
 800133c:	f000 f850 	bl	80013e0 <__smakebuf_r>
 8001340:	89a0      	ldrh	r0, [r4, #12]
 8001342:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001346:	f010 0301 	ands.w	r3, r0, #1
 800134a:	d00a      	beq.n	8001362 <__swsetup_r+0x9e>
 800134c:	2300      	movs	r3, #0
 800134e:	60a3      	str	r3, [r4, #8]
 8001350:	6963      	ldr	r3, [r4, #20]
 8001352:	425b      	negs	r3, r3
 8001354:	61a3      	str	r3, [r4, #24]
 8001356:	6923      	ldr	r3, [r4, #16]
 8001358:	b943      	cbnz	r3, 800136c <__swsetup_r+0xa8>
 800135a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800135e:	d1c4      	bne.n	80012ea <__swsetup_r+0x26>
 8001360:	bd38      	pop	{r3, r4, r5, pc}
 8001362:	0781      	lsls	r1, r0, #30
 8001364:	bf58      	it	pl
 8001366:	6963      	ldrpl	r3, [r4, #20]
 8001368:	60a3      	str	r3, [r4, #8]
 800136a:	e7f4      	b.n	8001356 <__swsetup_r+0x92>
 800136c:	2000      	movs	r0, #0
 800136e:	e7f7      	b.n	8001360 <__swsetup_r+0x9c>
 8001370:	20000058 	.word	0x20000058

08001374 <_sbrk_r>:
 8001374:	b538      	push	{r3, r4, r5, lr}
 8001376:	4d06      	ldr	r5, [pc, #24]	; (8001390 <_sbrk_r+0x1c>)
 8001378:	2300      	movs	r3, #0
 800137a:	4604      	mov	r4, r0
 800137c:	4608      	mov	r0, r1
 800137e:	602b      	str	r3, [r5, #0]
 8001380:	f7ff f832 	bl	80003e8 <_sbrk>
 8001384:	1c43      	adds	r3, r0, #1
 8001386:	d102      	bne.n	800138e <_sbrk_r+0x1a>
 8001388:	682b      	ldr	r3, [r5, #0]
 800138a:	b103      	cbz	r3, 800138e <_sbrk_r+0x1a>
 800138c:	6023      	str	r3, [r4, #0]
 800138e:	bd38      	pop	{r3, r4, r5, pc}
 8001390:	200001b8 	.word	0x200001b8

08001394 <__swhatbuf_r>:
 8001394:	b570      	push	{r4, r5, r6, lr}
 8001396:	460c      	mov	r4, r1
 8001398:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800139c:	2900      	cmp	r1, #0
 800139e:	b096      	sub	sp, #88	; 0x58
 80013a0:	4615      	mov	r5, r2
 80013a2:	461e      	mov	r6, r3
 80013a4:	da0d      	bge.n	80013c2 <__swhatbuf_r+0x2e>
 80013a6:	89a3      	ldrh	r3, [r4, #12]
 80013a8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80013ac:	f04f 0100 	mov.w	r1, #0
 80013b0:	bf0c      	ite	eq
 80013b2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80013b6:	2340      	movne	r3, #64	; 0x40
 80013b8:	2000      	movs	r0, #0
 80013ba:	6031      	str	r1, [r6, #0]
 80013bc:	602b      	str	r3, [r5, #0]
 80013be:	b016      	add	sp, #88	; 0x58
 80013c0:	bd70      	pop	{r4, r5, r6, pc}
 80013c2:	466a      	mov	r2, sp
 80013c4:	f000 f848 	bl	8001458 <_fstat_r>
 80013c8:	2800      	cmp	r0, #0
 80013ca:	dbec      	blt.n	80013a6 <__swhatbuf_r+0x12>
 80013cc:	9901      	ldr	r1, [sp, #4]
 80013ce:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80013d2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80013d6:	4259      	negs	r1, r3
 80013d8:	4159      	adcs	r1, r3
 80013da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013de:	e7eb      	b.n	80013b8 <__swhatbuf_r+0x24>

080013e0 <__smakebuf_r>:
 80013e0:	898b      	ldrh	r3, [r1, #12]
 80013e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80013e4:	079d      	lsls	r5, r3, #30
 80013e6:	4606      	mov	r6, r0
 80013e8:	460c      	mov	r4, r1
 80013ea:	d507      	bpl.n	80013fc <__smakebuf_r+0x1c>
 80013ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80013f0:	6023      	str	r3, [r4, #0]
 80013f2:	6123      	str	r3, [r4, #16]
 80013f4:	2301      	movs	r3, #1
 80013f6:	6163      	str	r3, [r4, #20]
 80013f8:	b002      	add	sp, #8
 80013fa:	bd70      	pop	{r4, r5, r6, pc}
 80013fc:	ab01      	add	r3, sp, #4
 80013fe:	466a      	mov	r2, sp
 8001400:	f7ff ffc8 	bl	8001394 <__swhatbuf_r>
 8001404:	9900      	ldr	r1, [sp, #0]
 8001406:	4605      	mov	r5, r0
 8001408:	4630      	mov	r0, r6
 800140a:	f7ff fb0f 	bl	8000a2c <_malloc_r>
 800140e:	b948      	cbnz	r0, 8001424 <__smakebuf_r+0x44>
 8001410:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001414:	059a      	lsls	r2, r3, #22
 8001416:	d4ef      	bmi.n	80013f8 <__smakebuf_r+0x18>
 8001418:	f023 0303 	bic.w	r3, r3, #3
 800141c:	f043 0302 	orr.w	r3, r3, #2
 8001420:	81a3      	strh	r3, [r4, #12]
 8001422:	e7e3      	b.n	80013ec <__smakebuf_r+0xc>
 8001424:	89a3      	ldrh	r3, [r4, #12]
 8001426:	6020      	str	r0, [r4, #0]
 8001428:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800142c:	81a3      	strh	r3, [r4, #12]
 800142e:	9b00      	ldr	r3, [sp, #0]
 8001430:	6163      	str	r3, [r4, #20]
 8001432:	9b01      	ldr	r3, [sp, #4]
 8001434:	6120      	str	r0, [r4, #16]
 8001436:	b15b      	cbz	r3, 8001450 <__smakebuf_r+0x70>
 8001438:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800143c:	4630      	mov	r0, r6
 800143e:	f000 f81d 	bl	800147c <_isatty_r>
 8001442:	b128      	cbz	r0, 8001450 <__smakebuf_r+0x70>
 8001444:	89a3      	ldrh	r3, [r4, #12]
 8001446:	f023 0303 	bic.w	r3, r3, #3
 800144a:	f043 0301 	orr.w	r3, r3, #1
 800144e:	81a3      	strh	r3, [r4, #12]
 8001450:	89a3      	ldrh	r3, [r4, #12]
 8001452:	431d      	orrs	r5, r3
 8001454:	81a5      	strh	r5, [r4, #12]
 8001456:	e7cf      	b.n	80013f8 <__smakebuf_r+0x18>

08001458 <_fstat_r>:
 8001458:	b538      	push	{r3, r4, r5, lr}
 800145a:	4d07      	ldr	r5, [pc, #28]	; (8001478 <_fstat_r+0x20>)
 800145c:	2300      	movs	r3, #0
 800145e:	4604      	mov	r4, r0
 8001460:	4608      	mov	r0, r1
 8001462:	4611      	mov	r1, r2
 8001464:	602b      	str	r3, [r5, #0]
 8001466:	f7fe ff96 	bl	8000396 <_fstat>
 800146a:	1c43      	adds	r3, r0, #1
 800146c:	d102      	bne.n	8001474 <_fstat_r+0x1c>
 800146e:	682b      	ldr	r3, [r5, #0]
 8001470:	b103      	cbz	r3, 8001474 <_fstat_r+0x1c>
 8001472:	6023      	str	r3, [r4, #0]
 8001474:	bd38      	pop	{r3, r4, r5, pc}
 8001476:	bf00      	nop
 8001478:	200001b8 	.word	0x200001b8

0800147c <_isatty_r>:
 800147c:	b538      	push	{r3, r4, r5, lr}
 800147e:	4d06      	ldr	r5, [pc, #24]	; (8001498 <_isatty_r+0x1c>)
 8001480:	2300      	movs	r3, #0
 8001482:	4604      	mov	r4, r0
 8001484:	4608      	mov	r0, r1
 8001486:	602b      	str	r3, [r5, #0]
 8001488:	f7fe ff95 	bl	80003b6 <_isatty>
 800148c:	1c43      	adds	r3, r0, #1
 800148e:	d102      	bne.n	8001496 <_isatty_r+0x1a>
 8001490:	682b      	ldr	r3, [r5, #0]
 8001492:	b103      	cbz	r3, 8001496 <_isatty_r+0x1a>
 8001494:	6023      	str	r3, [r4, #0]
 8001496:	bd38      	pop	{r3, r4, r5, pc}
 8001498:	200001b8 	.word	0x200001b8

0800149c <_init>:
 800149c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800149e:	bf00      	nop
 80014a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014a2:	bc08      	pop	{r3}
 80014a4:	469e      	mov	lr, r3
 80014a6:	4770      	bx	lr

080014a8 <_fini>:
 80014a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014aa:	bf00      	nop
 80014ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014ae:	bc08      	pop	{r3}
 80014b0:	469e      	mov	lr, r3
 80014b2:	4770      	bx	lr
